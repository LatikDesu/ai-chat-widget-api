openapi: 3.1.1
info:
  title: AI Chat Bot API
  description: |
    # AI Chat Bot API

    ## Основные возможности: 

    <details>
      <summary style="font-size: 1.17em; font-weight: bold;">Управление ботами</summary>
      <div style="padding: 15px; font-size: 0.9em;">
      
      - Создание и настройка чат-ботов
      - Кастомизация внешнего вида и поведения
      - Управление базой знаний через промпты
      </div>
    </details>

    <details>
    <summary style="font-size: 1.17em; font-weight: bold;">Безопасность и доступ</summary>
    <div style="padding: 15px; font-size: 0.9em;">

    - Система аутентификации пользователей
    - Управление API ключами
    - Разграничение прав доступа
    - Защита данных и приватность
    </div>
    </details>

    <details>
    <summary style="font-size: 1.17em; font-weight: bold;">Коммуникация</summary>
    <div style="padding: 15px; font-size: 0.9em;">

    - История сообщений и диалогов
    - Контекстные ответы
    </div>
    </details>

    <details>
    <summary style="font-size: 1.17em; font-weight: bold;">Аналитика и мониторинг</summary>
    <div style="padding: 15px; font-size: 0.9em;">

    - Сбор статистики использования
    - Анализ эффективности ботов
    - Мониторинг производительности
    - Отчеты и метрики
    </div>
    </details>

    <details>
    <summary style="font-size: 1.17em; font-weight: bold;">Управление контентом</summary>
    <div style="padding: 15px; font-size: 0.9em;">

    - Загрузка и обработка PDF документов
    - Управление промптами и шаблонами
    - Новостная система
    - Уведомления пользователей
    </div>
    </details>

    <details>
    <summary style="font-size: 1.17em; font-weight: bold;">Техническая информация</summary>
    <div style="padding: 15px; font-size: 0.9em;">

    - RESTful API
    - JSON формат данных
    - Bearer Token аутентификация
    - CORS поддержка
    - Swagger/OpenAPI документация
    </div>
    </details>

    ## Ресурсы
    * [Документация API](https://chat-api.esoraine.online/docs)
    * [GitHub репозиторий](@@@)
    * [Scalar UI](https://scalar.com)

  version: 1.0.0
  contact:
    name: Skillfactory hackaton
    url: https://chat-api.esoraine.online/
    email: info@esoraine.online
servers:
  - url: https://chat-api.esoraine.online
  - url: http://localhost:3000
    description: Responds with your request data
    variables:
      protocol:
        enum:
          - https
        default: https
      path:
        default: ''
security:
  - bearerAuth: []
  - basicAuth: []

tags:
  - name: Auth
    description: |
      Операции, связанные с аутентификацией пользователей. 
      Включает регистрацию, вход в систему, выход и обновление токенов. 
      Эти операции позволяют пользователям безопасно взаимодействовать с API, обеспечивая защиту их данных.

  - name: Auth options
    description: |
      Дополнительные операции, связанные с аутентификацией, такие как восстановление пароля, активация учетной записи и повторная отправка ссылки для активации. 
      Эти операции помогают пользователям управлять своими учетными записями и восстанавливать доступ к ним.

  - name: Users
    description: |
      Операции, связанные с управлением пользователями. 
      Включает создание, обновление, удаление и получение информации о пользователях. 
      Эти операции позволяют администраторам и пользователям управлять своими профилями и данными.

  - name: Statistics
    description: |
      Операции, связанные с получением статистики и аналитики. 
      Включает сбор и отображение данных о взаимодействии пользователей с системой, 
      а также метрики производительности и использования API. 
      Эти операции помогают в анализе и оптимизации работы приложения.

  - name: API Keys
    description: |
      Операции для управления API ключами. 
      Включает создание, обновление, удаление и получение API ключей.
      Позволяет пользователям управлять доступом к API, контролировать права доступа
      и обеспечивать безопасное взаимодействие с системой.
      API ключи используются для аутентификации запросов к чат-ботам.

  - name: Bots
    description: |
      Операции для управления чат-ботами. 
      Включает создание новых ботов, настройку их параметров, 
      управление поведением и интеграцию с различными платформами.
      Позволяет настраивать индивидуальное поведение каждого бота,
      управлять его знаниями и контролировать взаимодействие с пользователями.

  - name: Customization
    description: |
      Операции для настройки внешнего вида и поведения чат-ботов.
      Включает настройку цветовой схемы, стилей сообщений,
      приветственных сообщений и других визуальных элементов.
      Позволяет создавать уникальный дизайн для каждого бота,
      соответствующий фирменному стилю компании.

  - name: Prompts
    description: |
      Операции для управления промптами (инструкциями) чат-ботов.
      Включает создание, редактирование и удаление промптов,
      загрузку промптов из PDF файлов, управление категориями.
      Позволяет настраивать базу знаний бота и определять
      его поведение в различных ситуациях общения с пользователями.

  - name: Chats
    description: |
      Операции для управления чатами и сообщениями.
      Включает создание новых чатов, отправку сообщений,
      получение истории переписки и управление диалогами.

  - name: Bot Presets
    description: |
      Операции для управления предустановленными настройками ботов.
      Включает создание и управление шаблонами настроек,
      которые определяют базовое поведение и конфигурацию ботов.
      Позволяет быстро создавать новых ботов на основе готовых шаблонов,
      экономя время на настройке стандартных параметров.

  - name: Orders
    description: |
      Операции для управления заявками на консультацию.

  - name: News
    description: |
      Операции для управления новостями и уведомлениями.
      Включает создание, публикацию и управление новостными материалами,
      информирование пользователей об обновлениях и изменениях в системе.
      Позволяет администраторам управлять контентом и
      поддерживать информированность пользователей о важных событиях.

paths:
  # Auth
  /api/v1/auth/registration:
    post:
      tags:
        - Auth
      summary: Регистрация нового пользователя
      description: Этот эндпоинт позволяет зарегистрировать нового пользователя в системе.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  description: Имя пользователя, должно содержать не менее 2 символов.
                email:
                  type: string
                  format: email
                  description: Уникальный адрес электронной почты для входа.
                password:
                  type: string
                  minLength: 8
                  description: Пароль пользователя, должен содержать не менее 8 символов.
                passwordConfirm:
                  type: string
                  description: Подтверждение пароля, должно совпадать с полем password.
              required:
                - name
                - email
                - password
                - passwordConfirm
      responses:
        '201':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Пользователь успешно зарегистрирован.'
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Уникальный идентификатор зарегистрированного пользователя.
                      email:
                        type: string
                        description: Адрес электронной почты зарегистрированного пользователя.
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Ошибка валидации: имя должно содержать не менее 2 символов.'
        '409':
          description: Конфликт (например, email уже существует)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Пользователь с таким адресом электронной почты уже существует.'
  /api/v1/auth/login:
    post:
      tags:
        - Auth
      summary: Вход пользователя
      description: Этот эндпоинт позволяет пользователю войти в систему, используя свои учетные данные.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Уникальный адрес электронной почты для входа.
                password:
                  type: string
                  description: Пароль пользователя.
              required:
                - email
                - password
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Успешный вход.'
                  token:
                    type: string
                    description: JWT токен для аутентификации.
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Ошибка валидации: неверный формат email.'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Неверный email или пароль.'
  /api/v1/auth/me:
    get:
      tags:
        - Auth
      summary: Получить информацию о текущем пользователе
      description: Этот эндпоинт позволяет получить информацию о текущем аутентифицированном пользователе.
      responses:
        '200':
          description: Успешный ответ с информацией о пользователе
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Уникальный идентификатор пользователя.
                      email:
                        type: string
                        description: Адрес электронной почты пользователя.
                      name:
                        type: string
                        description: Имя пользователя.
                      role:
                        type: string
                        description: Роль пользователя (например, администратор, менеджер).
                      createdAt:
                        type: string
                        format: date-time
                        description: Дата и время создания учетной записи пользователя.
                      updatedAt:
                        type: string
                        format: date-time
                        description: Дата и время последнего обновления информации о пользователе.
        '401':
          description: Ошибка аутентификации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Пользователь не аутентифицирован.'
  /api/v1/auth/refresh:
    post:
      tags:
        - Auth
      summary: Обновление токена
      description: Этот эндпоинт позволяет обновить токен доступа, используя refresh-токен.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Refresh-токен, используемый для получения нового access-токена.
              required:
                - refreshToken
      responses:
        '200':
          description: Успешное обновление токена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                    description: Новый access-токен для аутентификации.
                  expiresIn:
                    type: integer
                    description: Время жизни нового токена в секундах.
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Ошибка валидации: refreshToken обязателен.'
        '401':
          description: Неверный или истекший refresh-токен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Неверный или истекший refresh-токен.'
  /api/v1/auth/logout:
    post:
      tags:
        - Auth
      summary: Выход пользователя
      description: Этот эндпоинт позволяет пользователю выйти из системы, удаляя токены аутентификации.
      responses:
        '200':
          description: Успешный выход
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Успешный выход.'
        '401':
          description: Ошибка аутентификации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Пользователь не аутентифицирован.'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Произошла ошибка при выходе.'

  # Auth options
  /api/v1/users/activation:
    get:
      tags:
        - Auth options
      summary: Активация учетной записи
      description: Этот эндпоинт позволяет активировать учетную запись пользователя с использованием активационного токена.
      parameters:
        - name: token
          in: query
          required: true
          description: Активационный токен, полученный пользователем.
          schema:
            type: string
      responses:
        '200':
          description: Успешная активация учетной записи
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Учетная запись успешно активирована.'
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      isActive:
                        type: boolean
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Активационный токен обязателен.'
        '404':
          description: Неверный токен активации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Неверный активационный токен.'
        '410':
          description: Токен активации истек
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Активационный токен истек.'
  /api/v1/users/resend-activation:
    post:
      tags:
        - Auth options
      summary: Повторная отправка активационного токена
      description: Этот эндпоинт позволяет повторно отправить активационный токен на email пользователя.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Адрес электронной почты для повторной отправки активационного токена.
              required:
                - email
      responses:
        '200':
          description: Успешная отправка активационного токена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Активационный токен повторно отправлен на ваш email.'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Пользователь с таким email не найден.'
  /api/v1/users/change-password:
    patch:
      tags:
        - Auth options
      summary: Изменение пароля пользователя
      description: Этот эндпоинт позволяет пользователю изменить свой пароль.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  description: Текущий пароль пользователя.
                newPassword:
                  type: string
                  description: Новый пароль пользователя.
                passwordConfirm:
                  type: string
                  description: Подтверждение нового пароля.
              required:
                - currentPassword
                - newPassword
                - passwordConfirm
      responses:
        '200':
          description: Успешное изменение пароля
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Пароль успешно изменен.'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Ошибка валидации: новый пароль должен содержать не менее 8 символов.'
        '401':
          description: Неверный текущий пароль
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Неверный текущий пароль.'
  /api/v1/users/forgot-password:
    post:
      tags:
        - Auth options
      summary: Восстановление пароля
      description: Этот эндпоинт позволяет пользователю запросить восстановление пароля.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Адрес электронной почты для восстановления пароля.
              required:
                - email
      responses:
        '200':
          description: Успешный запрос на восстановление пароля
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Инструкции по восстановлению пароля отправлены на ваш email.'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Пользователь с таким email не найден.'
  /api/v1/users/reset-password:
    post:
      tags:
        - Auth options
      summary: Сброс пароля
      description: Этот эндпоинт позволяет пользователю сбросить пароль, используя токен сброса.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Токен для сброса пароля.
                newPassword:
                  type: string
                  description: Новый пароль пользователя.
                passwordConfirm:
                  type: string
                  description: Подтверждение нового пароля.
              required:
                - token
                - newPassword
                - passwordConfirm
      responses:
        '200':
          description: Успешный сброс пароля
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Пароль успешно сброшен.'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Ошибка валидации: новый пароль должен содержать не менее 8 символов.'
        '401':
          description: Неверный токен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Неверный или истекший токен сброса пароля.'

  # Users
  /api/v1/users/create-business:
    post:
      tags:
        - Users
      summary: Создание бизнес-пользователя
      description: Этот эндпоинт позволяет создать нового бизнес-пользователя. Доступен только для администраторов.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email пользователя.
                name:
                  type: string
                  minLength: 2
                  description: Имя пользователя.
                companyName:
                  type: string
                  minLength: 2
                  description: Название компании.
                phone:
                  type: string
                  pattern: ^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$
                  description: Номер телефона.
                telegram:
                  type: string
                  pattern: ^@[a-zA-Z0-9_]{5,32}$
                  description: Username в Telegram.
              required:
                - email
      responses:
        '201':
          description: Бизнес-пользователь успешно создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      name:
                        type: string
                      companyName:
                        type: string
                      phone:
                        type: string
                      telegram:
                        type: string
                      role:
                        type: string
                        enum: [business]
                      isActive:
                        type: boolean
                      createdAt:
                        type: string
                        format: date-time
  /api/v1/users/create-manager:
    post:
      tags:
        - Users
      summary: Создание менеджера
      description: Этот эндпоинт позволяет создать нового менеджера. Доступен для бизнес-пользователей.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email менеджера.
                apiKeyId:
                  type: string
                  description: ID API ключа, к которому будет привязан менеджер.
                name:
                  type: string
                  minLength: 2
                  description: Имя менеджера.
                phone:
                  type: string
                  pattern: ^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$
                  description: Номер телефона.
                telegram:
                  type: string
                  pattern: ^@[a-zA-Z0-9_]{5,32}$
                  description: Username в Telegram.
              required:
                - email
                - apiKeyId
      responses:
        '201':
          description: Менеджер успешно создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                          email:
                            type: string
                          name:
                            type: string
                          phone:
                            type: string
                          telegram:
                            type: string
                          role:
                            type: string
                            enum: [manager]
                          isActive:
                            type: boolean
                          apiKeyIds:
                            type: array
                            items:
                              type: string
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. Only business users can create managers.'
  /api/v1/users/remove-manager:
    post:
      tags:
        - Users
      summary: Удаление менеджера
      description: Этот эндпоинт позволяет удалить менеджера из системы.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                managerId:
                  type: string
                  description: Уникальный идентификатор менеджера, которого нужно удалить.
              required:
                - managerId
      responses:
        '200':
          description: Успешное удаление менеджера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Менеджер успешно удален.'
        '404':
          description: Менеджер не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Менеджер с таким ID не найден.'
  /api/v1/users/{id}:
    get:
      tags:
        - Users
      summary: Получение детальной информации о пользователе
      description: Этот эндпоинт возвращает подробную информацию о пользователе, включая связанные API ключи. Доступен только для администраторов.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор пользователя.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешное получение информации о пользователе
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          email:
                            type: string
                          name:
                            type: string
                          role:
                            type: string
                            enum: [administrator, business, manager]
                          isActive:
                            type: boolean
                          companyName:
                            type: string
                            nullable: true
                          phone:
                            type: string
                            nullable: true
                          telegram:
                            type: string
                            nullable: true
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
                      keys:
                        type: object
                        properties:
                          owned:
                            type: array
                            description: API ключи, где пользователь является владельцем
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                title:
                                  type: string
                                owner:
                                  type: string
                                isActive:
                                  type: boolean
                                expiredAt:
                                  type: string
                                  format: date-time
                          accessed:
                            type: array
                            description: API ключи, к которым у пользователя есть доступ как у менеджера
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                title:
                                  type: string
                                owner:
                                  type: string
                                isActive:
                                  type: boolean
                                expiredAt:
                                  type: string
                                  format: date-time
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. Only administrators can view user details.'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'User not found'
  /api/v1/users/update:
    patch:
      tags:
        - Users
      summary: Обновление информации о пользователе
      description: Этот эндпоинт позволяет обновить информацию о пользователе. Доступен только для администраторов.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID пользователя для обновления.
                name:
                  type: string
                  minLength: 2
                  description: Новое имя пользователя.
                companyName:
                  type: string
                  minLength: 2
                  description: Новое название компании.
                phone:
                  type: string
                  pattern: ^(\+7|7|8)?[\s\-]?(\(\d{3}\)|\d{3})[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}$
                  description: Новый номер телефона.
                telegram:
                  type: string
                  pattern: ^@[a-zA-Z0-9_]{5,32}$
                  description: Новый username в Telegram.
                role:
                  type: string
                  enum: [administrator, business, manager]
                  description: Новая роль пользователя.
                isActive:
                  type: boolean
                  description: Новый статус активности пользователя.
              required:
                - userId
      responses:
        '200':
          description: Информация о пользователе успешно обновлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      name:
                        type: string
                      companyName:
                        type: string
                      phone:
                        type: string
                      telegram:
                        type: string
                      role:
                        type: string
                      isActive:
                        type: boolean
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. Only administrators can update users.'
  /api/v1/users/delete:
    post:
      tags:
        - Users
      summary: Удаление пользователя
      description: Этот эндпоинт позволяет удалить пользователя из системы. Доступен только для администраторов.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: Уникальный идентификатор пользователя для удаления.
              required:
                - userId
      responses:
        '200':
          description: Пользователь успешно удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'User and associated API keys have been deactivated'
                      deletedUser:
                        type: object
                        properties:
                          id:
                            type: string
                          email:
                            type: string
                          role:
                            type: string
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. Only administrators can delete users.'
  /api/v1/users/stats:
    get:
      tags:
        - Users
        - Statistics
      summary: Получение статистики пользователей
      description: Этот эндпоинт возвращает общую статистику по пользователям системы. Доступен только для администраторов.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешное получение статистики
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Общее количество пользователей в системе.
                  byRole:
                    type: object
                    description: Распределение пользователей по ролям.
                    properties:
                      administrator:
                        type: integer
                        description: Количество администраторов.
                      business:
                        type: integer
                        description: Количество бизнес-пользователей.
                      manager:
                        type: integer
                        description: Количество менеджеров.
                  byStatus:
                    type: object
                    description: Распределение пользователей по статусу активности.
                    properties:
                      active:
                        type: integer
                        description: Количество активных пользователей.
                      inactive:
                        type: integer
                        description: Количество неактивных пользователей.
                  withKeys:
                    type: object
                    description: Статистика по наличию API ключей.
                    properties:
                      with:
                        type: integer
                        description: Количество пользователей с API ключами.
                      without:
                        type: integer
                        description: Количество пользователей без API ключей.
                  recent:
                    type: object
                    description: Статистика за последние 30 дней.
                    properties:
                      total:
                        type: integer
                        description: Общее количество новых пользователей.
                      byRole:
                        type: object
                        description: Распределение новых пользователей по ролям.
                        properties:
                          administrator:
                            type: integer
                            description: Количество новых администраторов.
                          business:
                            type: integer
                            description: Количество новых бизнес-пользователей.
                          manager:
                            type: integer
                            description: Количество новых менеджеров.
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. Only administrators can view statistics.'
  /api/v1/users:
    get:
      tags:
        - Users
      summary: Получение списка пользователей с фильтрацией
      description: Этот эндпоинт позволяет получить список пользователей с возможностью фильтрации и сортировки. Доступен только для администраторов.
      security:
        - bearerAuth: []
      parameters:
        - name: skip
          in: query
          required: false
          description: Количество пропускаемых записей (для пагинации).
          schema:
            type: integer
            default: 0
        - name: take
          in: query
          required: false
          description: Количество записей на странице.
          schema:
            type: integer
            default: 10
        - name: role
          in: query
          required: false
          description: Фильтр по роли пользователя.
          schema:
            type: string
            enum: [administrator, business, manager]
        - name: search
          in: query
          required: false
          description: Поиск по email или имени пользователя.
          schema:
            type: string
        - name: sort
          in: query
          required: false
          description: Поле для сортировки.
          schema:
            type: string
            enum: [createdAt, email, role]
            default: createdAt
        - name: order
          in: query
          required: false
          description: Направление сортировки.
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: isActive
          in: query
          required: false
          description: Фильтр по статусу активности.
          schema:
            type: boolean
      responses:
        '200':
          description: Успешное получение списка пользователей
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            email:
                              type: string
                            name:
                              type: string
                            role:
                              type: string
                            isActive:
                              type: boolean
                            createdAt:
                              type: string
                              format: date-time
                            updatedAt:
                              type: string
                              format: date-time
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            description: Общее количество записей.
                          page:
                            type: integer
                            description: Текущая страница.
                          pageSize:
                            type: integer
                            description: Размер страницы.
        '400':
          description: Ошибка валидации параметров
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. Only administrators can view users list.'

  # Api keys
  /api/v1/api-keys/create-trial-key:
    post:
      # Краткое описание эндпоинта
      summary: Создание пробного API ключа
      # Подробное описание эндпоинта
      description: |
        Создает пробный API ключ с ограниченными возможностями.

        Особенности:
        - Фиксированный лимит токенов (50000)
        - Префикс ключа 'sk_trial_'
        - Обычный пользователь может создать только один ключ
        - Администраторы могут создавать ключи для других пользователей
        - Автоматически создает связанную статистику использования
        - Обновляет список ключей в профиле пользователя
      tags:
        - API Keys
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Тело запроса
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              # Обязательные поля
              required:
                - title
              properties:
                # Название ключа
                title:
                  type: string
                  minLength: 2
                  description: Название API ключа
                # Email владельца (только для администраторов)
                owner:
                  type: string
                  format: email
                  description: Email владельца (опционально, доступно только администраторам)
      responses:
        # Успешный ответ
        200:
          description: Пробный API ключ успешно создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      apiKey:
                        type: object
                        properties:
                          id:
                            type: string
                            example: 'sk_trial_1234567890abcdef'
                            description: Идентификатор API ключа с префиксом sk_trial_
                          owner:
                            type: string
                            format: email
                            description: Email владельца ключа
                          title:
                            type: string
                            description: Название ключа
                          tokenLimit:
                            type: integer
                            example: 50000
                            description: Фиксированный лимит токенов
                          isActive:
                            type: boolean
                            example: true
                            description: Статус активности ключа
                          createdAt:
                            type: string
                            format: date-time
                            description: Дата создания ключа
                          expiredAt:
                            type: string
                            format: date-time
                            nullable: true
                            description: Дата истечения срока действия (если установлена)
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка валидации
        400:
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    examples:
                      title_length:
                        value: 'Title must be at least 2 characters'
                      invalid_email:
                        value: 'Invalid email format'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    examples:
                      already_has_key:
                        value: 'You already have an API key'
                      admin_only:
                        value: 'Only administrators can specify owner'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to create trial API key'
  /api/v1/api-keys/create:
    post:
      # Краткое описание эндпоинта
      summary: Создание полноценного API ключа
      # Подробное описание эндпоинта
      description: |
        Создает полноценный API ключ с расширенными возможностями. Доступно только администраторам.

        Особенности:
        - Префикс ключа 'sk_live_'
        - Срок действия по умолчанию 3 месяца
        - Минимальный лимит токенов 1000
        - Стандартный лимит токенов 100000
        - Автоматически создает связанную статистику использования
        - Добавляет ключ в список ключей пользователя
        - Транзакционное создание (атомарная операция)
        - Автоматическая генерация названия ключа
      tags:
        - API Keys
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Тело запроса
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              # Обязательные поля
              required:
                - owner
              properties:
                owner:
                  type: string
                  format: email
                  description: Email пользователя, которому будет принадлежать ключ
                tokenLimit:
                  type: integer
                  minimum: 1000
                  default: 100000
                  description: Лимит токенов для ключа
                expiredAt:
                  type: string
                  format: date-time
                  description: Дата истечения срока действия (по умолчанию +3 месяца)
      responses:
        # Успешный ответ
        200:
          description: API ключ успешно создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      apiKey:
                        type: object
                        properties:
                          id:
                            type: string
                            example: 'sk_live_1234567890abcdef'
                            description: Идентификатор API ключа с префиксом sk_live_
                          owner:
                            type: string
                            format: email
                            description: Email владельца ключа
                          title:
                            type: string
                            example: 'API key for user@example.com'
                            description: Автоматически сгенерированное название ключа
                          tokenLimit:
                            type: integer
                            example: 100000
                            description: Установленный лимит токенов
                          isActive:
                            type: boolean
                            example: true
                            description: Статус активности ключа
                          createdAt:
                            type: string
                            format: date-time
                            description: Дата создания ключа
                          expiredAt:
                            type: string
                            format: date-time
                            description: Дата истечения срока действия
        # Ошибка авторизации или доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied. Only administrators can create API keys.'
        # Ошибка валидации
        400:
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    examples:
                      invalid_email:
                        value: 'Invalid email format'
                      token_limit:
                        value: 'Token limit must be at least 1000'
        # Пользователь не найден
        404:
          description: Пользователь не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'User not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to create API key'
  /api/v1/api-keys/update:
    patch:
      # Краткое описание эндпоинта
      summary: Обновление API ключа
      # Подробное описание эндпоинта
      description: |
        Обновляет параметры существующего API ключа.

        Особенности:
        - Обычные пользователи могут обновлять только название (title) своих ключей
        - Администраторы могут обновлять все поля любых ключей
        - Требуется указать хотя бы одно поле для обновления
        - Проверяется существование ключа и права доступа
        - Поддерживает частичное обновление (PATCH)
        - Возвращает обновленные данные ключа
      tags:
        - API Keys
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Тело запроса
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              # Обязательные поля
              required:
                - id
              properties:
                id:
                  type: string
                  description: Идентификатор API ключа
                title:
                  type: string
                  minLength: 2
                  description: Новое название ключа (доступно всем пользователям)
                tokenLimit:
                  type: integer
                  minimum: 1000
                  description: Новый лимит токенов (только для администраторов)
                isActive:
                  type: boolean
                  description: Статус активности ключа (только для администраторов)
                expiredAt:
                  type: string
                  format: date-time
                  description: Новая дата истечения срока действия (только для администраторов)
      responses:
        # Успешный ответ
        200:
          description: API ключ успешно обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      apiKey:
                        type: object
                        properties:
                          id:
                            type: string
                            example: 'sk_live_1234567890abcdef'
                          owner:
                            type: string
                            format: email
                          title:
                            type: string
                            example: 'Updated API Key Title'
                          tokenLimit:
                            type: integer
                            example: 100000
                          isActive:
                            type: boolean
                          createdAt:
                            type: string
                            format: date-time
                          expiredAt:
                            type: string
                            format: date-time
                          lastUsedAt:
                            type: string
                            format: date-time
                            nullable: true
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка валидации
        400:
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    examples:
                      no_data:
                        value: 'No data to update'
                      invalid_title:
                        value: 'Title must be at least 2 characters'
                      invalid_token_limit:
                        value: 'Token limit must be at least 1000'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied. You can only update your own API keys.'
        # Ключ не найден
        404:
          description: API ключ не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'API key not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to update API key'
  /api/v1/api-keys/delete:
    post:
      # Краткое описание эндпоинта
      summary: Удаление API ключа
      # Подробное описание эндпоинта
      description: |
        Удаляет API ключ и все связанные с ним данные. Доступно только администраторам.

        Особенности:
        - Только для администраторов
        - Транзакционное удаление (атомарная операция)
        - Каскадное удаление связанных данных
        - Автоматическое обновление списков ключей у пользователей
        - Возвращает информацию о затронутых пользователях
        - Удаляет статистику использования ключа
      tags:
        - API Keys
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Тело запроса
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  description: Идентификатор API ключа для удаления
                  example: 'sk_live_1234567890abcdef'
      responses:
        # Успешный ответ
        200:
          description: API ключ успешно удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'API key and all related data successfully deleted'
                      deletedKey:
                        type: object
                        properties:
                          id:
                            type: string
                            example: 'sk_live_1234567890abcdef'
                          owner:
                            type: string
                            format: email
                            example: 'user@example.com'
                          title:
                            type: string
                            example: 'Deleted API Key'
                      affectedUsers:
                        type: object
                        properties:
                          count:
                            type: integer
                            description: Количество затронутых пользователей
                            example: 1
                          emails:
                            type: array
                            description: Список email затронутых пользователей
                            items:
                              type: string
                              format: email
                            example: ['user@example.com']
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied. Only administrators can delete API keys.'
        # Ошибка валидации
        400:
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'API Key ID is required'
        # Ключ не найден
        404:
          description: API ключ не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'API key not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to delete API key'
  /api/v1/api-keys/{id}/info:
    get:
      # Краткое описание эндпоинта
      summary: Получение детальной информации об API ключе
      # Подробное описание эндпоинта
      description: |
        Возвращает подробную информацию об API ключе, включая статус, использование и связанные данные.

        Особенности:
        - Доступно для владельца ключа, администраторов и пользователей с доступом к ключу
        - Показывает текущее использование токенов
        - Рассчитывает оставшееся время действия ключа
        - Проверяет срок истечения
        - Отображает связь с ботом (если есть)
        - Включает информацию о последнем использовании
      tags:
        - API Keys
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры пути
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор API ключа
          schema:
            type: string
            example: 'sk_live_1234567890abcdef'
      responses:
        # Успешный ответ
        200:
          description: Информация об API ключе успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 'sk_live_1234567890abcdef'
                        description: Идентификатор API ключа
                      owner:
                        type: string
                        format: email
                        description: Email владельца ключа
                      title:
                        type: string
                        description: Название ключа
                      tokenUsed:
                        type: integer
                        description: Количество использованных токенов
                      tokenLimit:
                        type: integer
                        description: Общий лимит токенов
                      isActive:
                        type: boolean
                        description: Статус активности ключа
                      createdAt:
                        type: string
                        format: date-time
                        description: Дата создания ключа
                      expiredAt:
                        type: string
                        format: date-time
                        description: Дата истечения срока действия
                      lastUsedAt:
                        type: string
                        format: date-time
                        nullable: true
                        description: Дата последнего использования
                      isExpired:
                        type: boolean
                        description: Флаг истечения срока действия
                      daysUntilExpiration:
                        type: integer
                        description: Количество дней до истечения срока
                      botId:
                        type: string
                        nullable: true
                        description: ID связанного бота (если есть)
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'API Key ID is required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Ключ не найден
        404:
          description: API ключ не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'API key not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get API key details'
  /api/v1/api-keys/{id}/users:
    get:
      # Краткое описание эндпоинта
      summary: Получение списка пользователей API ключа
      # Подробное описание эндпоинта
      description: |
        Возвращает список всех пользователей, имеющих доступ к API ключу.

        Особенности:
        - Доступно только владельцу ключа и администраторам
        - Разделяет пользователей на владельца и менеджеров
        - Возвращает детальную информацию о каждом пользователе
        - Включает общее количество пользователей с доступом
        - Фильтрует неактивных пользователей
        - Показывает корпоративную принадлежность
      tags:
        - API Keys
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры пути
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор API ключа
          schema:
            type: string
            example: 'sk_live_1234567890abcdef'
      responses:
        # Успешный ответ
        200:
          description: Список пользователей успешно получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      # Информация о владельце
                      owner:
                        type: object
                        description: Владелец API ключа
                        properties:
                          id:
                            type: string
                            description: Уникальный идентификатор пользователя
                          email:
                            type: string
                            format: email
                            description: Email пользователя
                          role:
                            type: string
                            description: Роль пользователя в системе
                          name:
                            type: string
                            description: Имя пользователя
                          companyName:
                            type: string
                            description: Название компании
                          isActive:
                            type: boolean
                            description: Статус активности пользователя
                          createdAt:
                            type: string
                            format: date-time
                            description: Дата регистрации пользователя
                      # Список менеджеров
                      managers:
                        type: array
                        description: Список пользователей с доступом к ключу (кроме владельца)
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            email:
                              type: string
                              format: email
                            role:
                              type: string
                            name:
                              type: string
                            companyName:
                              type: string
                            isActive:
                              type: boolean
                            createdAt:
                              type: string
                              format: date-time
                      # Общее количество
                      totalCount:
                        type: integer
                        description: Общее количество пользователей с доступом к ключу
                        example: 5
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'API Key ID is required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Ключ не найден
        404:
          description: API ключ не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'API key not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get API key users'
  /api/v1/api-keys/{id}/statistics:
    get:
      # Краткое описание эндпоинта
      summary: Получение статистики использования API ключа
      # Подробное описание эндпоинта
      description: |
        Возвращает детальную статистику использования API ключа.

        Особенности:
        - Доступно администраторам и пользователям с доступом к ключу
        - Включает статистику использования токенов
        - Предоставляет метрики производительности
        - Показывает статистику чатов
        - Разделяет сообщения по типам (бот/человек/консультант)
        - Рассчитывает средние показатели
        - Отслеживает паттерны активности
        - Автоматически вычисляет среднее время ответа
      tags:
        - API Keys
        - Statistics
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры пути
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор API ключа
          schema:
            type: string
            example: 'sk_live_1234567890abcdef'
      responses:
        # Успешный ответ
        200:
          description: Статистика успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      # Основные метрики
                      tokenUsed:
                        type: integer
                        description: Количество использованных токенов
                      totalChatsStarted:
                        type: integer
                        description: Общее количество начатых чатов
                      totalMessagesSent:
                        type: integer
                        description: Общее количество отправленных сообщений
                      requestsCount:
                        type: integer
                        description: Общее количество запросов
                      # Статистика по типам сообщений
                      messages:
                        type: object
                        description: Распределение сообщений по типам
                        properties:
                          bot:
                            type: integer
                            description: Количество сообщений от бота
                          human:
                            type: integer
                            description: Количество сообщений от пользователей
                          consultant:
                            type: integer
                            description: Количество сообщений от консультантов
                      # Метрики производительности
                      performance:
                        type: object
                        description: Показатели производительности
                        properties:
                          totalResponseTime:
                            type: integer
                            description: Общее время ответа (мс)
                          responseCount:
                            type: integer
                            description: Количество ответов
                          averageResponseTime:
                            type: number
                            description: Среднее время ответа (мс)
                      # Статистика чатов
                      chats:
                        type: object
                        description: Метрики чатов
                        properties:
                          completed:
                            type: integer
                            description: Количество завершенных чатов
                          averageDuration:
                            type: number
                            description: Средняя продолжительность чата (мс)
                          shortestDuration:
                            type: integer
                            description: Самый короткий чат (мс)
                          longestDuration:
                            type: integer
                            description: Самый длинный чат (мс)
                      # Паттерны активности
                      activity:
                        type: object
                        description: Показатели активности
                        properties:
                          mostActiveHour:
                            type: integer
                            description: Час наибольшей активности (0-23)
                          leastActiveHour:
                            type: integer
                            description: Час наименьшей активности (0-23)
                      updatedAt:
                        type: string
                        format: date-time
                        description: Время последнего обновления статистики
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'API key ID is required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Статистика не найдена
        404:
          description: Статистика не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Statistics not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get API key statistics'
  /api/v1/api-keys/{id}/hourly-stats:
    get:
      # Краткое описание эндпоинта
      summary: Получение почасовой статистики API ключа
      # Подробное описание эндпоинта
      description: |
        Возвращает детальную статистику использования API ключа за последние 24 часа с разбивкой по часам.

        Особенности:
        - Доступно администраторам и пользователям с доступом к ключу
        - Показывает данные за последние 24 часа
        - Группировка по часам
        - Отслеживает динамику использования
        - Позволяет анализировать пиковые нагрузки
        - Помогает выявить паттерны использования
      tags:
        - API Keys
        - Statistics
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры пути
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор API ключа
          schema:
            type: string
            example: 'sk_live_1234567890abcdef'
      responses:
        # Успешный ответ
        200:
          description: Почасовая статистика успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    description: Массив статистики по часам
                    items:
                      type: object
                      properties:
                        hour:
                          type: string
                          format: date-time
                          description: Временная метка часа
                        requestsCount:
                          type: integer
                          description: Количество запросов за час
                        tokenUsed:
                          type: integer
                          description: Количество использованных токенов
                        messagesSent:
                          type: integer
                          description: Общее количество сообщений
                        chatsStarted:
                          type: integer
                          description: Количество начатых чатов
                        averageResponseTime:
                          type: number
                          description: Среднее время ответа за час (мс)
                        messagesDistribution:
                          type: object
                          description: Распределение сообщений по типам
                          properties:
                            bot:
                              type: integer
                              description: Сообщения от бота
                            human:
                              type: integer
                              description: Сообщения от пользователей
                            consultant:
                              type: integer
                              description: Сообщения от консультантов
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'API key ID is required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get hourly statistics'
  /api/v1/api-keys/{id}/day-stats:
    get:
      # Краткое описание эндпоинта
      summary: Получение статистики API ключа за конкретный день
      # Подробное описание эндпоинта
      description: |
        Возвращает детальную статистику использования API ключа за указанный день.

        Особенности:
        - Доступно администраторам и пользователям с доступом к ключу
        - Требует указания конкретной даты
        - Формат даты строго YYYY-MM-DD
        - Агрегирует все метрики за 24 часа выбранного дня
        - Предоставляет полную статистику использования
        - Позволяет анализировать исторические данные
      tags:
        - API Keys
        - Statistics
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры
      parameters:
        # Параметр пути
        - name: id
          in: path
          required: true
          description: Идентификатор API ключа
          schema:
            type: string
            example: 'sk_live_1234567890abcdef'
        # Query параметр
        - name: date
          in: query
          required: true
          description: Дата в формате YYYY-MM-DD
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2}$'
            example: '2024-02-20'
      responses:
        # Успешный ответ
        200:
          description: Статистика за день успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      date:
                        type: string
                        format: date
                        description: Дата статистики
                      summary:
                        type: object
                        description: Общие показатели за день
                        properties:
                          totalRequests:
                            type: integer
                            description: Общее количество запросов
                          totalTokens:
                            type: integer
                            description: Общее количество использованных токенов
                          totalMessages:
                            type: integer
                            description: Общее количество сообщений
                          uniqueUsers:
                            type: integer
                            description: Количество уникальных пользователей
                      messages:
                        type: object
                        description: Статистика сообщений
                        properties:
                          bot:
                            type: integer
                            description: Количество сообщений от бота
                          human:
                            type: integer
                            description: Количество сообщений от пользователей
                          consultant:
                            type: integer
                            description: Количество сообщений от консультантов
                      performance:
                        type: object
                        description: Показатели производительности
                        properties:
                          averageResponseTime:
                            type: number
                            description: Среднее время ответа за день (мс)
                          peakHour:
                            type: integer
                            description: Час пиковой нагрузки (0-23)
                          minHour:
                            type: integer
                            description: Час минимальной нагрузки (0-23)
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    examples:
                      no_id:
                        value: 'API key ID is required'
                      invalid_date:
                        value: 'Valid date is required (YYYY-MM-DD)'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get day statistics'
  /api/v1/api-keys/{id}/daily-stats:
    get:
      # Краткое описание эндпоинта
      summary: Получение ежедневной статистики API ключа за последние 30 дней
      # Подробное описание эндпоинта
      description: |
        Возвращает агрегированную статистику использования API ключа за последние 30 дней с разбивкой по дням.

        Особенности:
        - Доступно администраторам и пользователям с доступом к ключу
        - Показывает данные за последние 30 дней
        - Группировка по дням
        - Отслеживает тренды использования
        - Позволяет анализировать динамику нагрузки
        - Предоставляет агрегированные метрики по дням
        - Включает сравнительную статистику
      tags:
        - API Keys
        - Statistics
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры пути
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор API ключа
          schema:
            type: string
            example: 'sk_live_1234567890abcdef'
      responses:
        # Успешный ответ
        200:
          description: Ежедневная статистика успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      dailyStats:
                        type: array
                        description: Массив статистики по дням
                        items:
                          type: object
                          properties:
                            date:
                              type: string
                              format: date
                              description: Дата статистики
                            requestsCount:
                              type: integer
                              description: Количество запросов за день
                            tokenUsed:
                              type: integer
                              description: Количество использованных токенов
                            uniqueUsers:
                              type: integer
                              description: Количество уникальных пользователей
                            messageStats:
                              type: object
                              description: Статистика сообщений
                              properties:
                                total:
                                  type: integer
                                  description: Общее количество сообщений
                                bot:
                                  type: integer
                                  description: Сообщения от бота
                                human:
                                  type: integer
                                  description: Сообщения от пользователей
                                consultant:
                                  type: integer
                                  description: Сообщения от консультантов
                            performance:
                              type: object
                              description: Показатели производительности
                              properties:
                                averageResponseTime:
                                  type: number
                                  description: Среднее время ответа (мс)
                                peakHour:
                                  type: integer
                                  description: Час пиковой нагрузки (0-23)
                      summary:
                        type: object
                        description: Сводная статистика за 30 дней
                        properties:
                          totalRequests:
                            type: integer
                            description: Общее количество запросов
                          totalTokens:
                            type: integer
                            description: Общее количество токенов
                          averageDailyRequests:
                            type: number
                            description: Среднее количество запросов в день
                          maxDailyRequests:
                            type: integer
                            description: Максимальное количество запросов за день
                          totalUniqueUsers:
                            type: integer
                            description: Общее количество уникальных пользователей
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'API key ID is required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get daily statistics'
  /api/v1/api-keys/{id}/month-stats:
    get:
      # Краткое описание эндпоинта
      summary: Получение статистики API ключа за конкретный месяц
      # Подробное описание эндпоинта
      description: |
        Возвращает детальную статистику использования API ключа за указанный месяц.

        Особенности:
        - Доступно администраторам и пользователям с доступом к ключу
        - Требует указания года и месяца
        - Валидация корректности месяца (1-12)
        - Группировка данных по дням месяца
        - Предоставляет агрегированные метрики
        - Показывает динамику использования
      tags:
        - API Keys
        - Statistics
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры
      parameters:
        # Параметр пути
        - name: id
          in: path
          required: true
          description: Идентификатор API ключа
          schema:
            type: string
            example: 'sk_live_1234567890abcdef'
        # Query параметры
        - name: year
          in: query
          required: true
          description: Год в формате YYYY
          schema:
            type: integer
            example: 2024
        - name: month
          in: query
          required: true
          description: Месяц (1-12)
          schema:
            type: integer
            minimum: 1
            maximum: 12
            example: 3
      responses:
        # Успешный ответ
        200:
          description: Статистика за месяц успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      year:
                        type: integer
                        description: Год статистики
                      month:
                        type: integer
                        description: Месяц статистики
                      daily:
                        type: object
                        description: Статистика по дням
                        additionalProperties:
                          type: object
                          properties:
                            tokenUsed:
                              type: integer
                              description: Использовано токенов
                            chatsStarted:
                              type: integer
                              description: Начато чатов
                            messagesSent:
                              type: integer
                              description: Всего сообщений
                            messagesFromBot:
                              type: integer
                              description: Сообщений от бота
                            messagesFromUser:
                              type: integer
                              description: Сообщений от пользователей
                            requestsCount:
                              type: integer
                              description: Количество запросов
                      totals:
                        type: object
                        description: Итоговые показатели за месяц
                        properties:
                          tokenUsed:
                            type: integer
                            description: Всего использовано токенов
                          chatsStarted:
                            type: integer
                            description: Всего начато чатов
                          messagesSent:
                            type: integer
                            description: Всего отправлено сообщений
                          messagesFromBot:
                            type: integer
                            description: Всего сообщений от бота
                          messagesFromUser:
                            type: integer
                            description: Всего сообщений от пользователей
                          requestsCount:
                            type: integer
                            description: Общее количество запросов
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    examples:
                      no_id:
                        value: 'API key ID is required'
                      invalid_date:
                        value: 'Valid year and month (1-12) are required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get month statistics'
  /api/v1/api-keys/{id}/monthly-stats:
    get:
      # Краткое описание эндпоинта
      summary: Получение статистики API ключа за последние 12 месяцев
      # Подробное описание эндпоинта
      description: |
        Возвращает агрегированную статистику использования API ключа за последние 12 месяцев.

        Особенности:
        - Доступно администраторам и пользователям с доступом к ключу
        - Автоматически рассчитывает период в 12 месяцев от текущей даты
        - Группирует данные помесячно
        - Предоставляет общие итоги за весь период
        - Учитывает часовые пояса (UTC)
        - Включает детальную разбивку по типам сообщений
        - Показывает тренды использования
      tags:
        - API Keys
        - Statistics
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры пути
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор API ключа
          schema:
            type: string
            example: 'sk_live_1234567890abcdef'
      responses:
        # Успешный ответ
        200:
          description: Статистика за 12 месяцев успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      startTime:
                        type: string
                        format: date-time
                        description: Начало периода
                      endTime:
                        type: string
                        format: date-time
                        description: Конец периода
                      months:
                        type: array
                        description: Массив статистики по месяцам
                        items:
                          type: object
                          properties:
                            year:
                              type: integer
                              description: Год
                            month:
                              type: integer
                              description: Месяц (1-12)
                            date:
                              type: string
                              format: date
                              description: Дата начала месяца
                            tokenUsed:
                              type: integer
                              description: Использовано токенов
                            chatsStarted:
                              type: integer
                              description: Начато чатов
                            messagesSent:
                              type: integer
                              description: Всего сообщений
                            messagesFromBot:
                              type: integer
                              description: Сообщений от бота
                            messagesFromUser:
                              type: integer
                              description: Сообщений от пользователей
                            requestsCount:
                              type: integer
                              description: Количество запросов
                      totals:
                        type: object
                        description: Итоговые показатели за весь период
                        properties:
                          tokenUsed:
                            type: integer
                            description: Всего использовано токенов
                          chatsStarted:
                            type: integer
                            description: Всего начато чатов
                          messagesSent:
                            type: integer
                            description: Всего отправлено сообщений
                          messagesFromBot:
                            type: integer
                            description: Всего сообщений от бота
                          messagesFromUser:
                            type: integer
                            description: Всего сообщений от пользователей
                          requestsCount:
                            type: integer
                            description: Общее количество запросов
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'API key ID is required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get monthly statistics'
  /api/v1/api-keys/{id}/year-stats:
    get:
      # Краткое описание эндпоинта
      summary: Получение статистики API ключа за указанный год
      # Подробное описание эндпоинта
      description: |
        Возвращает детальную статистику использования API ключа за конкретный год.

        Особенности:
        - Доступно администраторам и пользователям с доступом к ключу
        - Требует указания года в диапазоне 2000-9999
        - Группирует данные по месяцам года
        - Предоставляет годовые итоги
        - Показывает помесячную динамику
        - Учитывает високосные годы
        - Агрегирует все метрики использования
      tags:
        - API Keys
        - Statistics
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры
      parameters:
        # Параметр пути
        - name: id
          in: path
          required: true
          description: Идентификатор API ключа
          schema:
            type: string
            example: 'sk_live_1234567890abcdef'
        # Query параметр
        - name: year
          in: query
          required: true
          description: Год в формате YYYY (2000-9999)
          schema:
            type: integer
            minimum: 2000
            maximum: 9999
            example: 2024
      responses:
        # Успешный ответ
        200:
          description: Статистика за год успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      year:
                        type: integer
                        description: Запрошенный год
                        example: 2024
                      months:
                        type: array
                        description: Массив статистики по месяцам
                        items:
                          type: object
                          properties:
                            month:
                              type: integer
                              description: Номер месяца (1-12)
                            tokenUsed:
                              type: integer
                              description: Использовано токенов
                            chatsStarted:
                              type: integer
                              description: Начато чатов
                            messagesSent:
                              type: integer
                              description: Всего сообщений
                            messagesFromBot:
                              type: integer
                              description: Сообщений от бота
                            messagesFromUser:
                              type: integer
                              description: Сообщений от пользователей
                            requestsCount:
                              type: integer
                              description: Количество запросов
                            averageResponseTime:
                              type: number
                              description: Среднее время ответа (мс)
                      totals:
                        type: object
                        description: Итоговые показатели за год
                        properties:
                          tokenUsed:
                            type: integer
                            description: Всего использовано токенов
                          chatsStarted:
                            type: integer
                            description: Всего начато чатов
                          messagesSent:
                            type: integer
                            description: Всего отправлено сообщений
                          messagesFromBot:
                            type: integer
                            description: Всего сообщений от бота
                          messagesFromUser:
                            type: integer
                            description: Всего сообщений от пользователей
                          requestsCount:
                            type: integer
                            description: Общее количество запросов
                          averageResponseTime:
                            type: number
                            description: Среднее время ответа за год (мс)
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    examples:
                      no_id:
                        value: 'API key ID is required'
                      invalid_year:
                        value: 'Valid year is required (2000-9999)'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get year statistics'

  # ChatBot
  /api/v1/bots/create:
    post:
      # Краткое описание эндпоинта
      summary: Создание нового чат-бота
      # Подробное описание эндпоинта
      description: |
        Создает нового чат-бота с указанными параметрами и настройками по умолчанию.

        Особенности:
        - Доступно только администраторам и бизнес-пользователям
        - Бизнес-пользователи могут создавать ботов только для своих API ключей
        - Автоматически создает кастомизацию с дефолтными значениями
        - Проверяет уникальность бота для API ключа
        - Валидирует все входные данные
        - Создает бота и кастомизацию в одной транзакции
      tags:
        - Bots
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Тело запроса
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - apiKeyId
              properties:
                apiKeyId:
                  type: string
                  description: Идентификатор API ключа
                  example: 'key_123456789'
                role:
                  type: string
                  description: Роль бота
                  example: 'customer support'
                tasks:
                  type: string
                  description: Задачи бота
                  example: 'Answer customer questions about products'
                emotionalProfile:
                  type: string
                  description: Эмоциональный профиль бота
                  example: 'friendly and professional'
                context:
                  type: string
                  description: Контекст работы бота
                  example: 'E-commerce support'
                example:
                  type: string
                  description: Пример диалога
                  example: "User: What are your shipping options?\nBot: We offer standard and express shipping..."
                notes:
                  type: string
                  description: Дополнительные заметки
                  example: 'Bot specializes in handling shipping and return queries'
                categories:
                  type: array
                  description: Категории бота
                  items:
                    type: string
                  example: ['support', 'e-commerce']
      responses:
        # Успешный ответ
        200:
          description: Бот успешно создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Идентификатор созданного бота
                      apiKeyId:
                        type: string
                        description: Идентификатор API ключа
                      role:
                        type: string
                        description: Роль бота
                      tasks:
                        type: string
                        description: Задачи бота
                      emotionalProfile:
                        type: string
                        description: Эмоциональный профиль
                      context:
                        type: string
                        description: Контекст работы
                      example:
                        type: string
                        description: Пример диалога
                      notes:
                        type: string
                        description: Заметки
                      categories:
                        type: array
                        description: Категории
                        items:
                          type: string
                      createdAt:
                        type: string
                        format: date-time
                        description: Дата создания
                      updatedAt:
                        type: string
                        format: date-time
                        description: Дата обновления
        # Ошибка валидации
        400:
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    examples:
                      validation:
                        value: 'Invalid input data'
                      duplicate:
                        value: 'Bot already exists for this API key'
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    examples:
                      role:
                        value: 'Access denied. Only administrators and business users can create bots.'
                      ownership:
                        value: 'Access denied. You can only create bots for your own API keys.'
        # API ключ не найден
        404:
          description: API ключ не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'API key not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to create bot'
  /api/v1/bots/{id}/info:
    get:
      # Краткое описание эндпоинта
      summary: Получение информации о чат-боте
      # Подробное описание эндпоинта
      description: |
        Возвращает детальную информацию о конкретном чат-боте.

        Особенности:
        - Доступно администраторам и владельцам бота
        - Проверяет связь бота с API ключом пользователя
        - Возвращает полную информацию о настройках бота
        - Включает метаданные (даты создания и обновления)
        - Проверяет существование бота
        - Валидирует права доступа
      tags:
        - Bots
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры пути
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор чат-бота
          schema:
            type: string
            example: 'bot_123456789'
      responses:
        # Успешный ответ
        200:
          description: Информация о боте успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Идентификатор бота
                        example: 'bot_123456789'
                      apiKeyId:
                        type: string
                        description: Идентификатор связанного API ключа
                        example: 'key_987654321'
                      role:
                        type: string
                        description: Роль бота
                        example: 'customer support'
                      tasks:
                        type: string
                        description: Задачи бота
                        example: 'Handle customer inquiries and support requests'
                      emotionalProfile:
                        type: string
                        description: Эмоциональный профиль бота
                        example: 'friendly and professional'
                      context:
                        type: string
                        description: Контекст работы бота
                        example: 'E-commerce support environment'
                      example:
                        type: string
                        description: Пример диалога
                        example: "User: How can I track my order?\nBot: I can help you with that..."
                      notes:
                        type: string
                        description: Дополнительные заметки
                        example: 'Specialized in order tracking and returns'
                      categories:
                        type: array
                        description: Категории бота
                        items:
                          type: string
                        example: ['support', 'e-commerce']
                      createdAt:
                        type: string
                        format: date-time
                        description: Дата создания бота
                      updatedAt:
                        type: string
                        format: date-time
                        description: Дата последнего обновления
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Bot ID is required'
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Бот не найден
        404:
          description: Бот не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Bot not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get bot info'
  /api/v1/bots/{id}/update:
    patch:
      # Краткое описание эндпоинта
      summary: Обновление настроек чат-бота
      # Подробное описание эндпоинта
      description: |
        Обновляет настройки и параметры существующего чат-бота.

        Особенности:
        - Доступно администраторам и владельцам бота
        - Поддерживает частичное обновление (только указанные поля)
        - Специальная обработка категорий (добавление/удаление)
        - Проверка дублирования категорий
        - Валидирует все входные данные
        - Проверяет существование бота
        - Сохраняет неизменными неуказанные поля
      tags:
        - Bots
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры пути
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор чат-бота
          schema:
            type: string
            example: 'bot_123456789'
      # Тело запроса
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  description: Новая роль бота
                  example: 'advanced customer support'
                tasks:
                  type: string
                  description: Обновленные задачи бота
                  example: 'Handle complex customer inquiries and technical support'
                emotionalProfile:
                  type: string
                  description: Новый эмоциональный профиль
                  example: 'professional and empathetic'
                context:
                  type: string
                  description: Обновленный контекст работы
                  example: 'Technical support environment'
                example:
                  type: string
                  description: Новый пример диалога
                  example: "User: I need help with integration\nBot: I'll guide you through..."
                notes:
                  type: string
                  description: Обновленные заметки
                  example: 'Specialized in technical integrations'
                addCategories:
                  type: array
                  description: Категории для добавления
                  items:
                    type: string
                  example: ['technical', 'integration']
                removeCategories:
                  type: array
                  description: Категории для удаления
                  items:
                    type: string
                  example: ['general']
      responses:
        # Успешный ответ
        200:
          description: Бот успешно обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Идентификатор бота
                      apiKeyId:
                        type: string
                        description: Идентификатор API ключа
                      role:
                        type: string
                        description: Обновленная роль
                      tasks:
                        type: string
                        description: Обновленные задачи
                      emotionalProfile:
                        type: string
                        description: Обновленный эмоциональный профиль
                      context:
                        type: string
                        description: Обновленный контекст
                      example:
                        type: string
                        description: Обновленный пример диалога
                      notes:
                        type: string
                        description: Обновленные заметки
                      categories:
                        type: array
                        description: Актуальный список категорий
                        items:
                          type: string
                      createdAt:
                        type: string
                        format: date-time
                        description: Дата создания
                      updatedAt:
                        type: string
                        format: date-time
                        description: Дата обновления
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    examples:
                      no_id:
                        value: 'Bot ID is required'
                      duplicate_category:
                        value: 'Category "technical" already exists'
                      validation:
                        value: 'Invalid input data'
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Бот не найден
        404:
          description: Бот не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Bot not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to update bot'
  /api/v1/bots/{id}/delete:
    delete:
      # Краткое описание эндпоинта
      summary: Удаление чат-бота
      # Подробное описание эндпоинта
      description: |
        Полностью удаляет чат-бота и все связанные с ним данные.

        Особенности:
        - Доступно администраторам и владельцам бота
        - Каскадное удаление связанных данных (кастомизация, промпты)
        - Проверка существования бота перед удалением
        - Проверка прав доступа к API ключу
        - Безвозвратное удаление всех данных бота
        - Автоматическая очистка связанных таблиц
      tags:
        - Bots
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры пути
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор чат-бота
          schema:
            type: string
            example: 'bot_123456789'
      responses:
        # Успешный ответ
        200:
          description: Бот успешно удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Bot successfully deleted'
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Bot ID is required'
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Бот не найден
        404:
          description: Бот не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Bot not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to delete bot'
  /api/v1/bots/{id}/customization:
    get:
      # Краткое описание эндпоинта
      summary: Получение настроек кастомизации чат-бота
      # Подробное описание эндпоинта
      description: |
        Возвращает все настройки визуальной кастомизации чат-бота.

        Особенности:
        - Доступно администраторам и владельцам бота
        - Включает все цветовые схемы
        - Содержит настройки заголовка
        - Включает приветственное сообщение
        - Предоставляет стили для сообщений бота и пользователя
        - Проверяет существование кастомизации
        - Возвращает полную конфигурацию интерфейса
      tags:
        - Bots
        - Customization
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры пути
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор чат-бота
          schema:
            type: string
            example: 'bot_123456789'
      responses:
        # Успешный ответ
        200:
          description: Настройки кастомизации успешно получены
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      greeting:
                        type: string
                        description: Приветственное сообщение бота
                        example: 'Hello! How can I help you today?'
                      headerTitle:
                        type: string
                        description: Заголовок чата
                        example: 'AI Chat'
                      headerColor:
                        type: string
                        description: Цвет фона заголовка
                        example: '#ffffff'
                      headerTextColor:
                        type: string
                        description: Цвет текста заголовка
                        example: '#000000'
                      backgroundColor:
                        type: string
                        description: Цвет фона чата
                        example: '#f5f5f5'
                      userColor:
                        type: string
                        description: Цвет фона сообщений пользователя
                        example: '#e3f2fd'
                      userBorderColor:
                        type: string
                        description: Цвет границы сообщений пользователя
                        example: '#bbdefb'
                      userTextColor:
                        type: string
                        description: Цвет текста сообщений пользователя
                        example: '#000000'
                      botColor:
                        type: string
                        description: Цвет фона сообщений бота
                        example: '#f5f5f5'
                      botBorderColor:
                        type: string
                        description: Цвет границы сообщений бота
                        example: '#e0e0e0'
                      botTextColor:
                        type: string
                        description: Цвет текста сообщений бота
                        example: '#000000'
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Bot ID is required'
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Ошибки отсутствия данных
        404:
          description: Данные не найдены
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    examples:
                      bot_not_found:
                        value: 'Bot not found'
                      customization_not_found:
                        value: 'Customization not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get bot customization'
    patch:
      # Краткое описание эндпоинта
      summary: Обновление настроек кастомизации чат-бота
      # Подробное описание эндпоинта
      description: |
        Обновляет визуальные настройки и параметры чат-бота.

        Особенности:
        - Доступно администраторам и владельцам бота
        - Поддерживает частичное обновление (только указанные поля)
        - Валидирует цветовые коды
        - Сохраняет неизмененные настройки
        - Проверяет существование кастомизации
        - Обновляет все визуальные параметры чата
      tags:
        - Bots
        - Customization
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры пути
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор чат-бота
          schema:
            type: string
            example: 'bot_123456789'
      # Тело запроса
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                greeting:
                  type: string
                  description: Приветственное сообщение
                  example: 'Здравствуйте! Чем могу помочь?'
                headerTitle:
                  type: string
                  description: Заголовок чата
                  example: 'Поддержка клиентов'
                headerColor:
                  type: string
                  description: Цвет фона заголовка (HEX)
                  example: '#ffffff'
                headerTextColor:
                  type: string
                  description: Цвет текста заголовка (HEX)
                  example: '#000000'
                backgroundColor:
                  type: string
                  description: Цвет фона чата (HEX)
                  example: '#f5f5f5'
                userColor:
                  type: string
                  description: Цвет фона сообщений пользователя (HEX)
                  example: '#e3f2fd'
                userBorderColor:
                  type: string
                  description: Цвет границы сообщений пользователя (HEX)
                  example: '#bbdefb'
                userTextColor:
                  type: string
                  description: Цвет текста сообщений пользователя (HEX)
                  example: '#000000'
                botColor:
                  type: string
                  description: Цвет фона сообщений бота (HEX)
                  example: '#f5f5f5'
                botBorderColor:
                  type: string
                  description: Цвет границы сообщений бота (HEX)
                  example: '#e0e0e0'
                botTextColor:
                  type: string
                  description: Цвет текста сообщений бота (HEX)
                  example: '#000000'
      responses:
        # Успешный ответ
        200:
          description: Настройки кастомизации успешно обновлены
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/CustomizationResponse'
        # Ошибки валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    examples:
                      no_id:
                        value: 'Bot ID is required'
                      invalid_color:
                        value: 'Invalid color format'
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Ошибки отсутствия данных
        404:
          description: Данные не найдены
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    examples:
                      bot_not_found:
                        value: 'Bot not found'
                      customization_not_found:
                        value: 'Customization not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to update bot customization'
  /api/v1/bots/{id}/prompts:
    get:
      # Краткое описание эндпоинта
      summary: Получение списка промптов чат-бота
      # Подробное описание эндпоинта
      description: |
        Возвращает список активных промптов, связанных с конкретным чат-ботом.

        Особенности:
        - Доступно администраторам и владельцам бота
        - Возвращает только активные промпты (isActive: true)
        - Промпты сгруппированы по категориям
        - Включает метаданные каждого промпта
        - Проверяет права доступа к боту
        - Фильтрует неактивные промпты
      tags:
        - Bots
        - Prompts
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры пути
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор чат-бота
          schema:
            type: string
            example: 'bot_123456789'
      responses:
        # Успешный ответ
        200:
          description: Список промптов успешно получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      prompts:
                        type: array
                        description: Список активных промптов
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              description: Идентификатор промпта
                              example: 'prompt_123456789'
                            category:
                              type: string
                              description: Категория промпта
                              example: 'greeting'
                            content:
                              type: string
                              description: Содержание промпта
                              example: 'Вы являетесь специалистом поддержки...'
                            isActive:
                              type: boolean
                              description: Статус активности промпта
                              example: true
                            createdAt:
                              type: string
                              format: date-time
                              description: Дата создания промпта
                            updatedAt:
                              type: string
                              format: date-time
                              description: Дата последнего обновления промпта
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Bot ID is required'
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Бот не найден
        404:
          description: Бот не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Bot not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get bot prompts'

  # Chats
  /api/v1/chats/create:
    post:
      tags:
        - Chats
      summary: Создание нового чата
      description: |
        Этот эндпоинт создает новый чат и обновляет статистику использования API ключа.

        Особенности:
        - Требует валидный API ключ
        - Создает новый чат с указанным заголовком и именем пользователя, приветственное сообщение
        - Обновляет статистику использования API ключа
        - Возвращает ID созданного чата
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKeyId:
                  type: string
                  format: uuid
                  description: ID API ключа для создания чата
                title:
                  type: string
                  description: Заголовок чата
                  minLength: 1
                userName:
                  type: string
                  description: Имя пользователя в чате
                  minLength: 1
              required:
                - apiKeyId
                - title
                - userName
      responses:
        '201':
          description: Чат успешно создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: ID созданного чата
                      title:
                        type: string
                        description: Заголовок чата
                      userName:
                        type: string
                        description: Имя пользователя
                      createdAt:
                        type: string
                        format: date-time
                        description: Время создания чата
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'apiKeyId, title and userName are required'
        '404':
          description: API ключ не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'API key not found'
        '403':
          description: API ключ неактивен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'API key is inactive'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Failed to create chat'

  /api/v1/chats/list:
    get:
      tags:
        - Chats
      summary: Получение списка чатов
      description: |
        Получение списка чатов с возможностью фильтрации и пагинации.

        Особенности:
        - Требует авторизации
        - Проверяет доступ пользователя к API ключу
        - Поддерживает множество фильтров
        - Включает пагинацию и подсчет общего количества
        - Возвращает количество сообщений для каждого чата
      security:
        - bearerAuth: []
      parameters:
        - name: apiKeyId
          in: query
          required: true
          description: ID API ключа для фильтрации чатов
          schema:
            type: string
            format: uuid
        - name: mode
          in: query
          required: false
          description: Режим чата для фильтрации
          schema:
            type: string
        - name: isClosed
          in: query
          required: false
          description: Фильтр по статусу закрытия чата
          schema:
            type: boolean
        - name: search
          in: query
          required: false
          description: Поиск по заголовку чата (регистронезависимый)
          schema:
            type: string
        - name: startDate
          in: query
          required: false
          description: Начальная дата для фильтрации
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: false
          description: Конечная дата для фильтрации
          schema:
            type: string
            format: date
        - name: limit
          in: query
          required: false
          description: Количество чатов на странице
          schema:
            type: integer
            default: 10
        - name: page
          in: query
          required: false
          description: Номер страницы
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Успешное получение списка чатов
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
                            mode:
                              type: string
                            isClosed:
                              type: boolean
                            createdAt:
                              type: string
                              format: date-time
                            updatedAt:
                              type: string
                              format: date-time
                            _count:
                              type: object
                              properties:
                                messages:
                                  type: integer
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            description: Общее количество чатов
                          page:
                            type: integer
                            description: Текущая страница
                          pageSize:
                            type: integer
                            description: Размер страницы
                          pageCount:
                            type: integer
                            description: Общее количество страниц
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'API key ID is required'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Unauthorized'
        '403':
          description: Нет доступа к API ключу
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. You do not have permission to view these chats.'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Failed to get chats'

  /api/v1/chats/{id}/messages:
    get:
      tags:
        - Chats
      summary: Получение сообщений чата
      description: |
        Получение всех сообщений конкретного чата.

        Особенности:
        - Сообщения возвращаются в хронологическом порядке (по возрастанию даты)
        - Возвращает основную информацию о чате вместе с сообщениями
        - Для каждого сообщения указывается роль отправителя
        - Не требует дополнительных параметров запроса
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор чата
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешное получение сообщений чата
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: ID чата
                      title:
                        type: string
                        description: Заголовок чата
                      mode:
                        type: string
                        description: Режим работы чата
                      messages:
                        type: array
                        description: Список сообщений
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              description: ID сообщения
                            content:
                              type: string
                              description: Содержание сообщения
                            role:
                              type: string
                              description: Роль отправителя (user/assistant)
                            createdAt:
                              type: string
                              format: date-time
                              description: Дата создания сообщения
        '400':
          description: Отсутствует ID чата
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Chat ID is required'
        '404':
          description: Чат не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Chat not found'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Failed to load chat messages'

  /api/v1/chats/{id}/completion:
    post:
      tags:
        - Chats
      summary: Получение ответа от GPT
      description: |
        Отправка сообщения и получение ответа от GPT с сохранением в истории чата.

        Особенности:
        - Автоматически сохраняет ответ в истории чата
        - Обновляет статистику использования API ключа
        - Подсчитывает токены и время ответа
        - Использует контекст предыдущих сообщений
        - Валидирует входящее сообщение
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор чата
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: Текст сообщения для отправки
                  minLength: 1
      responses:
        '200':
          description: Успешное получение ответа от GPT
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      response:
                        type: string
                        description: Ответ от GPT
                      tokens:
                        type: integer
                        description: Количество использованных токенов
                      responseTime:
                        type: number
                        description: Время ответа в миллисекундах
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Chat ID is required'
        '404':
          description: Чат не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Chat not found'
        '422':
          description: Ошибка валидации сообщения
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Message is required'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Failed to get GPT response'

  /api/v1/chats/update:
    patch:
      tags:
        - Chats
      summary: Обновление параметров чата
      description: |
        Обновление режима работы и/или статуса закрытия чата.

        Особенности:
        - Частичное обновление (можно указать только нужные поля)
        - Отслеживание измененных полей
        - Проверка на фактические изменения (не обновляет, если значения те же)
        - Возвращает список измененных полей
        - Оптимизированный запрос к базе данных
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  format: uuid
                  description: Уникальный идентификатор чата
                mode:
                  type: string
                  description: Режим работы чата
                isClosed:
                  type: boolean
                  description: Статус закрытия чата
      responses:
        '200':
          description: Успешное обновление чата
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    description: Сообщение об успехе с перечислением измененных полей
                    example: 'Chat updated successfully. Changed fields: mode, isClosed'
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: ID чата
                      mode:
                        type: string
                        description: Текущий режим чата
                      isClosed:
                        type: boolean
                        description: Текущий статус закрытия
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    examples:
                      noId:
                        value: 'Chat ID is required'
                      noFields:
                        value: 'At least one field (mode or isClosed) must be provided'
        '404':
          description: Чат не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Chat not found'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Failed to update chat'

  /api/v1/chats/delete:
    post:
      tags:
        - Chats
      summary: Массовое удаление чатов
      description: |
        Удаление одного или нескольких чатов по их идентификаторам.

        Особенности:
        - Поддерживает массовое удаление
        - Проверяет права доступа к API ключу
        - Удаляет только чаты, принадлежащие одному API ключу
        - Требует авторизации
        - Каскадное удаление связанных сообщений
        - Возвращает количество удаленных чатов
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - chatIds
              properties:
                chatIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Массив идентификаторов чатов для удаления
                  minItems: 1
      responses:
        '200':
          description: Успешное удаление чатов
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    description: Сообщение об успехе с количеством удаленных чатов
                    example: 'Successfully deleted 3 chat(s)'
                  data:
                    type: object
                    properties:
                      deletedCount:
                        type: integer
                        description: Количество фактически удаленных чатов
                        example: 3
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Chat IDs array is required'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Unauthorized'
        '403':
          description: Нет прав доступа к чатам
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. You do not have permission to delete these chats.'
        '404':
          description: Чаты не найдены
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Chats not found'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Failed to delete chats'

  # Prompts
  /api/v1/prompts/create:
    post:
      # Краткое описание эндпоинта
      summary: Создание нового промпта для чат-бота
      # Подробное описание эндпоинта
      description: |
        Создает новый промпт для чат-бота и генерирует для него эмбеддинги.

        Особенности:
        - Доступно администраторам и владельцам бота
        - Автоматически создает векторные эмбеддинги для контента
        - Проверяет права доступа к боту
        - Валидирует формат UUID для botId
        - Поддерживает категоризацию промптов
        - Позволяет указать статус активности
        - Создает промпт и эмбеддинги в одной транзакции
      tags:
        - Prompts
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Тело запроса
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - botId
                - category
                - content
              properties:
                botId:
                  type: string
                  format: uuid
                  description: Идентификатор чат-бота
                  example: '123e4567-e89b-12d3-a456-426614174000'
                category:
                  type: string
                  description: Категория промпта
                  example: 'greeting'
                  minLength: 1
                content:
                  type: string
                  description: Содержание промпта
                  example: 'Вы являетесь специалистом поддержки компании...'
                  minLength: 1
                isActive:
                  type: boolean
                  description: Статус активности промпта
                  default: true
                  example: true
      responses:
        # Успешный ответ
        200:
          description: Промпт успешно создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    description: Данные созданного промпта с эмбеддингами
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    examples:
                      invalid_uuid:
                        value: 'Invalid uuid'
                      empty_category:
                        value: 'String must contain at least 1 character(s)'
                      empty_content:
                        value: 'String must contain at least 1 character(s)'
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Бот не найден
        404:
          description: Бот не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Bot not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    examples:
                      create_error:
                        value: 'Failed to create prompt'
                      embeddings_error:
                        value: 'Failed to create prompt embeddings'
  /api/v1/prompts/upload-pdf:
    post:
      # Краткое описание эндпоинта
      summary: Загрузка PDF файла для создания промптов
      # Подробное описание эндпоинта
      description: |
        Загружает PDF файл, извлекает из него текст и создает промпты с эмбеддингами для чат-бота.

        Особенности:
        - Доступно администраторам и владельцам бота
        - Автоматически создает промпты из содержимого PDF
        - Генерирует векторные эмбеддинги для каждого промпта
        - Сохраняет файл в локальном хранилище
        - Проверяет MIME-тип файла (только PDF)
        - Создает структуру директорий при необходимости
        - Именует файл по ID бота
        - Обрабатывает большие файлы
      tags:
        - Prompts
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Тело запроса
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - botId
                - file
              properties:
                botId:
                  type: string
                  format: uuid
                  description: Идентификатор чат-бота
                  example: '123e4567-e89b-12d3-a456-426614174000'
                file:
                  type: string
                  format: binary
                  description: PDF файл для загрузки (максимальный размер зависит от настроек сервера)
      responses:
        # Успешный ответ
        200:
          description: PDF успешно загружен и обработан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      fileName:
                        type: string
                        description: Имя сохраненного файла
                        example: '123e4567-e89b-12d3-a456-426614174000.pdf'
                      promptsCreated:
                        type: integer
                        description: Количество созданных промптов
                        example: 15
        # Ошибки валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    examples:
                      no_form_data:
                        value: 'No form data provided'
                      no_bot_id:
                        value: 'Bot ID is required'
                      no_file:
                        value: 'PDF file is required'
                      wrong_format:
                        value: 'Invalid file format. Only PDF files are allowed'
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Access denied'
        # Бот не найден
        404:
          description: Бот не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'Bot not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    examples:
                      create_error:
                        value: 'Failed to create prompt'
                      embeddings_error:
                        value: 'Failed to create prompt embeddings'
                      file_system_error:
                        value: 'Failed to save file'
  /api/v1/prompts/update:
    patch:
      tags:
        - Prompts
      summary: Обновление промпта
      description: |
        Этот эндпоинт позволяет обновить существующий промпт или его статус активности. 

        Особенности:
        - Требует авторизации
        - Доступен только пользователям с доступом к API ключу, к которому привязан промпт
        - При указании только isActive обновляется статус без изменения контента
        - При указании content создается новый вектор для промпта
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: Уникальный идентификатор промпта.
                content:
                  type: string
                  description: Новое содержимое промпта.
                isActive:
                  type: boolean
                  description: Статус активности промпта.
              required:
                - id
      responses:
        '200':
          description: Успешное обновление промпта
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      content:
                        type: string
                      isActive:
                        type: boolean
                      botId:
                        type: string
                        format: uuid
                      category:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    examples:
                      - 'ID is required.'
                      - 'Content is required to update the prompt.'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Unauthorized'
        '403':
          description: Нет доступа
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. You do not have permission to update this prompt.'
        '404':
          description: Промпт не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Prompt not found.'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Failed to update prompt embeddings'
  /api/v1/prompts/download-pdf/{botId}:
    get:
      tags:
        - Prompts
      summary: Скачивание PDF файла
      description: |
        Этот эндпоинт позволяет скачать PDF файл, связанный с ботом. 

        Особенности:
        - Требует авторизации
        - Доступен только пользователям с доступом к API ключу бота
        - Возвращает файл в формате PDF
      security:
        - bearerAuth: []
      parameters:
        - name: botId
          in: path
          required: true
          description: ID бота, чей PDF файл нужно скачать
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: PDF файл
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Bot ID is required'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Unauthorized'
        '403':
          description: Нет доступа
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. You do not have permission to download this file.'
        '404':
          description: Бот не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Bot not found'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Failed to download file'
  /api/v1/prompts/delete:
    post:
      tags:
        - Prompts
      summary: Удаление промпта
      description: >
        Этот эндпоинт позволяет удалить существующий промпт.

        Особенности:
        - Требует авторизации
        - Проверяет права доступа к API ключу бота, которому принадлежит промпт
        - Полностью удаляет промпт из системы
        - Доступен только пользователям с доступом к API ключу бота
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: Уникальный идентификатор промпта для удаления
              required:
                - id
      responses:
        '200':
          description: Промпт успешно удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Prompt deleted successfully'
        '400':
          description: Отсутствует ID промпта
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Prompt ID is required'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Unauthorized'
        '403':
          description: Нет прав доступа
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. You do not have permission to delete this prompt.'
        '404':
          description: Промпт не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Prompt not found'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Failed to delete prompt'

  # Bot Presets
  /api/v1/bot-presets/list:
    get:
      tags:
        - Bot Presets
      summary: Получение списка пресетов
      description: |
        Этот эндпоинт возвращает список пресетов ботов.

        Особенности:
        - Администраторы видят все пресеты и могут фильтровать по isPublic
        - Бизнес-пользователи видят только публичные пресеты
        - Поддерживает поиск по названию и описанию
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          required: false
          description: Поисковый запрос для фильтрации по названию и описанию
          schema:
            type: string
        - name: isPublic
          in: query
          required: false
          description: Фильтр по публичности (доступен только администраторам)
          schema:
            type: boolean
      responses:
        '200':
          description: Успешное получение списка пресетов
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        icon:
                          type: string
                          nullable: true
                        title:
                          type: string
                        description:
                          type: string
                          nullable: true
                        isPublic:
                          type: boolean
                        role:
                          type: string
                          nullable: true
                        tasks:
                          type: string
                          nullable: true
                        emotionalProfile:
                          type: string
                          nullable: true
                        context:
                          type: string
                          nullable: true
                        example:
                          type: string
                          nullable: true
                        notes:
                          type: string
                          nullable: true
                        categories:
                          type: array
                          items:
                            type: string
                        customization:
                          type: object
                        prompts:
                          type: object
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Unauthorized'

  /api/v1/bot-presets/{id}:
    get:
      tags:
        - Bot Presets
      summary: Получение пресета по ID
      description: |
        Этот эндпоинт возвращает детальную информацию о пресете бота.

        Особенности:
        - Администраторы могут просматривать любой пресет
        - Бизнес-пользователи могут просматривать только публичные пресеты
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID пресета
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешное получение пресета
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      icon:
                        type: string
                        nullable: true
                      title:
                        type: string
                      description:
                        type: string
                        nullable: true
                      isPublic:
                        type: boolean
                      role:
                        type: string
                        nullable: true
                      tasks:
                        type: string
                        nullable: true
                      emotionalProfile:
                        type: string
                        nullable: true
                      context:
                        type: string
                        nullable: true
                      example:
                        type: string
                        nullable: true
                      notes:
                        type: string
                        nullable: true
                      categories:
                        type: array
                        items:
                          type: string
                      customization:
                        type: object
                      prompts:
                        type: object
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Unauthorized'
        '403':
          description: Нет доступа к непубличному пресету
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. This preset is not public.'
        '404':
          description: Пресет не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Preset not found'
  /api/v1/bot-presets/create:
    post:
      tags:
        - Bot Presets
      summary: Создание пресета бота
      description: |
        Этот эндпоинт позволяет создать новый пресет бота.

        Особенности:
        - Доступен только администраторам
        - Поддерживает настройку всех параметров бота
        - Позволяет задать публичность пресета
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Название пресета (обязательное поле)
                description:
                  type: string
                  description: Описание пресета
                isPublic:
                  type: boolean
                  description: Флаг публичности пресета
                  default: false
                role:
                  type: string
                  description: Роль бота
                tasks:
                  type: string
                  description: Задачи бота
                emotionalProfile:
                  type: string
                  description: Эмоциональный профиль
                context:
                  type: string
                  description: Контекст работы
                example:
                  type: string
                  description: Примеры диалогов
                notes:
                  type: string
                  description: Дополнительные заметки
                categories:
                  type: array
                  items:
                    type: string
                  description: Категории для фильтрации
                customization:
                  type: object
                  description: Настройки внешнего вида
                prompts:
                  type: object
                  description: Массив промптов с категориями
              required:
                - title
      responses:
        '201':
          description: Пресет успешно создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      title:
                        type: string
                      # ... (остальные поля пресета)

  /api/v1/bot-presets/update:
    patch:
      tags:
        - Bot Presets
      summary: Обновление пресета бота
      description: |
        Этот эндпоинт позволяет обновить существующий пресет бота.

        Особенности:
        - Доступен только администраторам
        - Позволяет обновить любые поля пресета
        - Требует указания ID пресета
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: ID пресета (обязательное поле)
                title:
                  type: string
                  description: Новое название пресета
                # ... (все поля аналогичные созданию)
              required:
                - id

  /api/v1/bot-presets/delete:
    post:
      tags:
        - Bot Presets
      summary: Удаление пресета бота
      description: |
        Этот эндпоинт позволяет удалить существующий пресет бота.

        Особенности:
        - Доступен только администраторам
        - Полностью удаляет пресет из системы
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: ID пресета для удаления
              required:
                - id
      responses:
        '200':
          description: Пресет успешно удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Preset deleted successfully'

        # Общие ответы для всех эндпоинтов
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Unauthorized'
        '403':
          description: Нет прав доступа
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. Only administrators can manage presets.'
        '404':
          description: Пресет не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Preset not found'

  # Orders
  /api/v1/orders/create:
    post:
      tags:
        - Orders
      summary: Создание нового заказа
      description: Этот эндпоинт позволяет создать новый заказ в системе. Не требует авторизации.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                companyName:
                  type: string
                  minLength: 2
                  description: Название компании.
                email:
                  type: string
                  format: email
                  description: Email для связи.
                name:
                  type: string
                  minLength: 2
                  description: Имя контактного лица.
                phone:
                  type: string
                  pattern: ^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$
                  description: Контактный телефон.
                telegram:
                  type: string
                  pattern: ^@[a-zA-Z0-9_]{5,32}$
                  description: Username в Telegram.
              required:
                - companyName
                - email
                - name
      responses:
        '201':
          description: Заказ успешно создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Уникальный идентификатор заказа.
                      companyName:
                        type: string
                        description: Название компании.
                      email:
                        type: string
                        description: Email для связи.
                      name:
                        type: string
                        description: Имя контактного лица.
                      phone:
                        type: string
                        description: Контактный телефон.
                      telegram:
                        type: string
                        description: Username в Telegram.
                      status:
                        type: string
                        enum: [new]
                        description: Статус заказа.
                      metadata:
                        type: object
                        properties:
                          ip:
                            type: string
                            description: IP адрес отправителя.
                          userAgent:
                            type: string
                            description: User-Agent браузера.
                          referer:
                            type: string
                            description: Referer запроса.
                      createdAt:
                        type: string
                        format: date-time
                        description: Дата и время создания заказа.
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Validation error: companyName must be at least 2 characters'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Failed to create order'
  /api/v1/orders/update:
    patch:
      tags:
        - Orders
      summary: Обновление заказа
      description: Этот эндпоинт позволяет обновить существующий заказ. Доступен только для администраторов.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID заказа для обновления.
                companyName:
                  type: string
                  minLength: 2
                  description: Новое название компании.
                email:
                  type: string
                  format: email
                  description: Новый email для связи.
                name:
                  type: string
                  minLength: 2
                  description: Новое имя контактного лица.
                phone:
                  type: string
                  pattern: ^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$
                  description: Новый контактный телефон.
                telegram:
                  type: string
                  pattern: ^@[a-zA-Z0-9_]{5,32}$
                  description: Новый username в Telegram.
                status:
                  type: string
                  enum: [new, processing, completed]
                  description: Новый статус заказа.
                notes:
                  type: string
                  description: Заметки к заказу.
              required:
                - id
      responses:
        '200':
          description: Заказ успешно обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      companyName:
                        type: string
                      email:
                        type: string
                      name:
                        type: string
                      phone:
                        type: string
                      telegram:
                        type: string
                      status:
                        type: string
                        enum: [new, processing, completed]
                      notes:
                        type: string
                      metadata:
                        type: object
                        properties:
                          ip:
                            type: string
                          userAgent:
                            type: string
                          referer:
                            type: string
                      updatedAt:
                        type: string
                        format: date-time
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Validation error: invalid status value'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. Only administrators can update orders.'
        '404':
          description: Заказ не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Order not found'
  /api/v1/orders/delete:
    post:
      tags:
        - Orders
      summary: Удаление заказа
      description: Этот эндпоинт позволяет удалить заказ из системы. Доступен только для администраторов.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: string
                  description: Уникальный идентификатор заказа для удаления.
              required:
                - orderId
      responses:
        '200':
          description: Заказ успешно удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Заказ успешно удален.'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. Only administrators can delete orders.'
        '404':
          description: Заказ не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Заказ с таким ID не найден.'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Произошла ошибка при удалении заказа.'
  /api/v1/orders:
    get:
      tags:
        - Orders
      summary: Получение списка заказов
      description: Этот эндпоинт позволяет получить список заказов с возможностью фильтрации по различным параметрам.
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          required: false
          description: Фильтр по статусу заказа (например, new, processing, completed).
          schema:
            type: string
            enum: [new, processing, completed]
        - name: customerName
          in: query
          required: false
          description: Фильтр по имени клиента.
          schema:
            type: string
        - name: companyName
          in: query
          required: false
          description: Фильтр по названию компании.
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: Номер страницы для пагинации.
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          description: Количество заказов на странице.
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Успешное получение списка заказов
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      orders:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            companyName:
                              type: string
                            email:
                              type: string
                            name:
                              type: string
                            phone:
                              type: string
                            telegram:
                              type: string
                            status:
                              type: string
                              enum: [new, processing, completed]
                            createdAt:
                              type: string
                              format: date-time
                            updatedAt:
                              type: string
                              format: date-time
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            description: Общее количество заказов.
                          page:
                            type: integer
                            description: Номер текущей страницы.
                          pageSize:
                            type: integer
                            description: Размер страницы.
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Ошибка валидации: неверный параметр.'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. Only authorized users can view orders.'
  /api/v1/orders/statistics:
    get:
      tags:
        - Orders
        - Statistics
      summary: Получение статистики заказов
      description: Этот эндпоинт возвращает статистику по заказам в системе, включая общее количество заказов, распределение по статусам и другие метрики. Доступен только для администраторов.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешное получение статистики заказов
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalOrders:
                    type: integer
                    description: Общее количество заказов в системе.
                  ordersByStatus:
                    type: object
                    properties:
                      new:
                        type: integer
                        description: Количество новых заказов.
                      processing:
                        type: integer
                        description: Количество заказов в обработке.
                      completed:
                        type: integer
                        description: Количество завершенных заказов.
                      canceled:
                        type: integer
                        description: Количество отмененных заказов.
                  recentOrders:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Уникальный идентификатор заказа.
                        companyName:
                          type: string
                          description: Название компании, сделавшей заказ.
                        createdAt:
                          type: string
                          format: date-time
                          description: Дата и время создания заказа.
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Access denied. Only administrators can view order statistics.'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Internal server error.'

  # News
  /api/v1/news/create:
    post:
      # Краткое описание эндпоинта
      summary: Создание новой новости
      # Подробное описание эндпоинта
      description: Создает новую новость в системе. Доступно только администраторам.
      tags:
        - News
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                # Заголовок новости
                title:
                  type: string
                  minLength: 1
                  description: Заголовок новости
                  required: true
                # Содержание новости
                content:
                  type: string
                  minLength: 1
                  description: Содержание новости
                  required: true
                # Тип новости
                type:
                  type: string
                  enum: [news, update, maintenance, announcement]
                  default: news
                  description: Тип новости (новость, обновление, тех. работы, объявление)
                # Статус публикации
                status:
                  type: string
                  enum: [draft, published, archived]
                  default: draft
                  description: Статус публикации (черновик, опубликовано, в архиве)
                # Приоритет новости
                priority:
                  type: integer
                  minimum: 0
                  default: 0
                  description: Приоритет новости (чем выше, тем важнее)
                # Роли, которым доступна новость
                roles:
                  type: array
                  items:
                    type: string
                  default: []
                  description: Массив ролей, которым доступна новость
                # Дата публикации
                publishAt:
                  type: string
                  format: date-time
                  description: Запланированная дата и время публикации
                  nullable: true
      responses:
        # Успешный ответ
        200:
          description: Новость успешно создана
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      content:
                        type: string
                      type:
                        type: string
                      status:
                        type: string
                      priority:
                        type: integer
                      roles:
                        type: array
                        items:
                          type: string
                      publishAt:
                        type: string
                        format: date-time
                        nullable: true
                      viewedBy:
                        type: array
                        items:
                          type: string
        # Ошибка валидации
        400:
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Заголовок обязателен'
        # Ошибка доступа
        403:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: 'Доступ запрещен. Только администраторы могут создавать новости.'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Не удалось создать новость'
  /api/v1/news/update:
    patch:
      # Краткое описание эндпоинта
      summary: Обновление существующей новости
      # Подробное описание эндпоинта
      description: Частичное обновление существующей новости. Доступно только администраторам.
      tags:
        - News
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              # Обязательные поля
              required:
                - id
              properties:
                # ID новости для обновления
                id:
                  type: string
                  minLength: 1
                  description: Идентификатор новости
                # Заголовок новости
                title:
                  type: string
                  minLength: 1
                  description: Заголовок новости
                # Содержание новости
                content:
                  type: string
                  minLength: 1
                  description: Содержание новости
                # Тип новости
                type:
                  type: string
                  enum: [news, update, maintenance, announcement]
                  description: Тип новости (новость, обновление, тех. работы, объявление)
                # Статус публикации
                status:
                  type: string
                  enum: [draft, published, archived]
                  description: Статус публикации (черновик, опубликовано, в архиве)
                # Приоритет новости
                priority:
                  type: integer
                  minimum: 0
                  description: Приоритет новости
                # Роли доступа
                roles:
                  type: array
                  items:
                    type: string
                  description: Массив ролей, которым доступна новость
                # Дата публикации
                publishAt:
                  type: string
                  format: date-time
                  nullable: true
                  description: Запланированная дата и время публикации
      responses:
        # Успешный ответ
        200:
          description: Новость успешно обновлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      # Все остальные поля опциональны и возвращаются только если были обновлены
                      title:
                        type: string
                      content:
                        type: string
                      type:
                        type: string
                      status:
                        type: string
                      priority:
                        type: integer
                      roles:
                        type: array
                        items:
                          type: string
                      publishAt:
                        type: string
                        format: date-time
                        nullable: true
        # Ошибка валидации
        400:
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Request body cannot be empty'
        # Ошибка авторизации
        401:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Access denied. Only administrators can update news.'
        # Новость не найдена
        404:
          description: Новость не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'News not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to update news'
  /api/v1/news/delete:
    post:
      # Краткое описание эндпоинта
      summary: Удаление новости
      # Подробное описание эндпоинта
      description: Удаляет существующую новость из системы. Доступно только администраторам.
      tags:
        - News
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              # Обязательные поля
              required:
                - id
              properties:
                # ID новости для удаления
                id:
                  type: string
                  minLength: 1
                  description: Идентификатор новости для удаления
      responses:
        # Успешный ответ
        200:
          description: Новость успешно удалена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: ID удаленной новости
        # Ошибка валидации
        400:
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Request body cannot be empty'
        # Ошибка авторизации
        401:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Access denied. Only administrators can delete news.'
        # Новость не найдена
        404:
          description: Новость не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'News not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to delete news'
  /api/v1/news/list:
    get:
      # Краткое описание эндпоинта
      summary: Получение списка новостей
      # Подробное описание эндпоинта
      description: Возвращает список новостей с учетом прав доступа пользователя и пагинации.
      tags:
        - News
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры запроса
      parameters:
        # Пагинация - пропуск записей
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Количество пропускаемых записей для пагинации
        # Пагинация - количество записей
        - name: take
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Количество записей на странице
        # Фильтр по типу новости
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [news, update, maintenance, announcement]
          description: Фильтрация по типу новости
      responses:
        # Успешный ответ
        200:
          description: Список новостей успешно получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        content:
                          type: string
                        type:
                          type: string
                          enum: [news, update, maintenance, announcement]
                        status:
                          type: string
                          enum: [draft, published, archived]
                        priority:
                          type: integer
                        roles:
                          type: array
                          items:
                            type: string
                        publishAt:
                          type: string
                          format: date-time
                        viewedBy:
                          type: array
                          items:
                            type: string
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get news list'
  /api/v1/news/{id}:
    get:
      # Краткое описание эндпоинта
      summary: Получение новости по ID
      # Подробное описание эндпоинта
      description: Возвращает детальную информацию о новости. Доступ зависит от роли пользователя.
      tags:
        - News
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры пути
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор новости
      responses:
        # Успешный ответ
        200:
          description: Новость успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Идентификатор новости
                      title:
                        type: string
                        description: Заголовок новости
                      content:
                        type: string
                        description: Содержание новости
                      type:
                        type: string
                        enum: [news, update, maintenance, announcement]
                        description: Тип новости
                      status:
                        type: string
                        enum: [draft, published, archived]
                        description: Статус новости
                      priority:
                        type: integer
                        description: Приоритет новости
                      roles:
                        type: array
                        items:
                          type: string
                        description: Роли, имеющие доступ к новости
                      publishAt:
                        type: string
                        format: date-time
                        description: Дата публикации
                      viewedBy:
                        type: array
                        items:
                          type: string
                        description: Список пользователей, просмотревших новость
        # Ошибка авторизации
        401:
          description: Требуется авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Authentication required'
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'News ID is required'
        # Новость не найдена
        404:
          description: Новость не найдена или нет доступа
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'News not found or access denied'
  /api/v1/news/admin/list:
    get:
      # Краткое описание эндпоинта
      summary: Получение списка новостей для администраторов
      # Подробное описание эндпоинта
      description: Возвращает расширенный список новостей с дополнительными параметрами фильтрации и сортировки. Доступно только администраторам.
      tags:
        - News
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры запроса
      parameters:
        # Пагинация - пропуск записей
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Количество пропускаемых записей для пагинации
        # Пагинация - количество записей
        - name: take
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Количество записей на странице
        # Фильтр по статусу
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [draft, published, archived]
          description: Фильтрация по статусу новости
        # Фильтр по типу
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [news, update, maintenance, announcement]
          description: Фильтрация по типу новости
        # Поле для сортировки
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum: [createdAt, publishAt, priority]
            default: createdAt
          description: Поле для сортировки результатов
        # Направление сортировки
        - name: order
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Направление сортировки (по возрастанию/убыванию)
        # Поисковый запрос
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Поисковый запрос для фильтрации новостей
      responses:
        # Успешный ответ
        200:
          description: Список новостей успешно получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        content:
                          type: string
                        type:
                          type: string
                          enum: [news, update, maintenance, announcement]
                        status:
                          type: string
                          enum: [draft, published, archived]
                        priority:
                          type: integer
                        roles:
                          type: array
                          items:
                            type: string
                        publishAt:
                          type: string
                          format: date-time
                        createdAt:
                          type: string
                          format: date-time
                        viewedBy:
                          type: array
                          items:
                            type: string
        # Ошибка авторизации
        401:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Access denied. Only administrators can view this list.'
        # Ошибка валидации
        400:
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'Invalid query parameters'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get news list'
  /api/v1/news/admin/{id}:
    get:
      # Краткое описание эндпоинта
      summary: Получение детальной информации о новости (для администраторов)
      # Подробное описание эндпоинта
      description: Возвращает полную информацию о новости. Доступно только администраторам.
      tags:
        - News
      # Требуется авторизация через Bearer токен
      security:
        - BearerAuth: []
      # Параметры пути
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор новости
      responses:
        # Успешный ответ
        200:
          description: Новость успешно получена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Идентификатор новости
                      title:
                        type: string
                        description: Заголовок новости
                      content:
                        type: string
                        description: Содержание новости
                      type:
                        type: string
                        enum: [news, update, maintenance, announcement]
                        description: Тип новости
                      status:
                        type: string
                        enum: [draft, published, archived]
                        description: Статус новости
                      priority:
                        type: integer
                        description: Приоритет новости
                      roles:
                        type: array
                        items:
                          type: string
                        description: Роли, имеющие доступ к новости
                      publishAt:
                        type: string
                        format: date-time
                        description: Дата публикации
                      createdAt:
                        type: string
                        format: date-time
                        description: Дата создания
                      updatedAt:
                        type: string
                        format: date-time
                        description: Дата последнего обновления
        # Ошибка авторизации
        401:
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: 'Access denied. Only administrators can view news details.'
        # Ошибка валидации
        400:
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: 'News ID is required'
        # Новость не найдена
        404:
          description: Новость не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: 'News not found'
        # Серверная ошибка
        500:
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: 'Failed to get news details'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: JWT Bearer token authentication
    basicAuth:
      type: http
      scheme: basic
      description: Basic HTTP authentication
    apiKeyHeader:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key request header
    apiKeyQuery:
      type: apiKey
      in: query
      name: api_key
      description: API key query parameter
    apiKeyCookie:
      type: apiKey
      in: cookie
      name: api_key
      description: API key browser cookie
    oAuth2:
      type: oauth2
      description: OAuth 2.0 authentication
      flows:
        authorizationCode:
          authorizationUrl: https://galaxy.scalar.com/oauth/authorize
          tokenUrl: https://galaxy.scalar.com/oauth/token
          scopes:
            read:account: read your account information
            write:planets: modify planets in your account
            read:planets: read your planets
        clientCredentials:
          tokenUrl: https://galaxy.scalar.com/oauth/token
          scopes:
            read:account: read your account information
            write:planets: modify planets in your account
            read:planets: read your planets
        # Legacy
        implicit:
          authorizationUrl: https://galaxy.scalar.com/oauth/authorize
          scopes:
            read:account: read your account information
            write:planets: modify planets in your account
            read:planets: read your planets
        # Legacy
        password:
          tokenUrl: https://galaxy.scalar.com/oauth/token
          scopes:
            read:account: read your account information
            write:planets: modify planets in your account
            read:planets: read your planets
    openIdConnect:
      type: openIdConnect
      openIdConnectUrl: https://galaxy.scalar.com/.well-known/openid-configuration
      description: OpenID Connect Authentication
  schemas:
    # Модели для пользователей
    Users:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          description: Уникальный email для входа
        password:
          type: string
          description: Хешированный пароль
        role:
          type: string
          enum: [administrator, business, manager]
          default: business
          description: Роль пользователя
        isActive:
          type: boolean
          default: false
          description: Статус активации аккаунта
        companyName:
          type: string
          nullable: true
          description: Название компании
        name:
          type: string
          nullable: true
          description: Имя пользователя
        phone:
          type: string
          nullable: true
          description: Контактный телефон
        telegram:
          type: string
          nullable: true
          description: Telegram контакт
        apiKeyIds:
          type: array
          items:
            type: string
          description: Массив ID доступных API ключей
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Модели для активации
    ActivationToken:
      type: object
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
          description: Уникальный токен активации
        userId:
          type: string
          description: ID пользователя
        expiresAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
    ApiKey:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор API ключа.
        owner:
          type: string
          description: Email владельца API ключа.
        title:
          type: string
          description: Заголовок или название API ключа.
        tokenLimit:
          type: integer
          default: 50000
          description: Максимальное количество токенов, которые могут быть использованы с этим API ключом.
        createdAt:
          type: string
          format: date-time
          description: Время создания API ключа.
        expiredAt:
          type: string
          format: date-time
          description: Время, когда API ключ истечет.
        lastUsedAt:
          type: string
          format: date-time
          nullable: true
          description: Время последнего использования API ключа.
        isActive:
          type: boolean
          default: true
          description: Указывает, активен ли в данный момент API ключ.

    ApiKeyStatistics:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор статистики API ключа.
        apiKeyId:
          type: string
          description: Идентификатор API ключа, к которому относятся эти статистические данные.
        tokenUsed:
          type: integer
          default: 0
          description: Общее количество использованных токенов.
        totalChatsStarted:
          type: integer
          default: 0
          description: Общее количество начатых чатов с использованием этого API ключа.
        totalMessagesSent:
          type: integer
          default: 0
          description: Общее количество отправленных сообщений.
        requestsCount:
          type: integer
          default: 0
          description: Общее количество запросов, сделанных с использованием этого API ключа.
        botMessagesCount:
          type: integer
          default: 0
          description: Количество сообщений, отправленных ботом.
        humanMessagesCount:
          type: integer
          default: 0
          description: Количество сообщений, отправленных пользователем.
        consultantMessagesCount:
          type: integer
          default: 0
          description: Количество сообщений, отправленных консультантом.
        totalResponseTime:
          type: integer
          default: 0
          description: Общее время ответа в секундах.
        responseCount:
          type: integer
          default: 0
          description: Общее количество ответов, полученных с использованием этого API ключа.
        completedChats:
          type: integer
          default: 0
          description: Количество завершенных чатов.
        totalChatDuration:
          type: integer
          default: 0
          description: Общее время чатов в секундах.
        shortestChatDuration:
          type: integer
          default: 0
          description: Длительность самого короткого чата в секундах.
        longestChatDuration:
          type: integer
          default: 0
          description: Длительность самого длинного чата в секундах.
        mostActiveHour:
          type: integer
          default: 0
          description: Час с наибольшей активностью (количество запросов).
        leastActiveHour:
          type: integer
          default: 0
          description: Час с наименьшей активностью (количество запросов).
        updatedAt:
          type: string
          format: date-time
          description: Время последнего обновления статистики.

    # Модели для использования API ключей
    ApiKeyUsage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        apiKeyId:
          type: string
          description: ID API ключа
        timeInterval:
          type: string
          format: date-time
          description: Интервал времени
        tokenUsed:
          type: integer
          default: 0
          description: Использованные токены
        chatsStarted:
          type: integer
          default: 0
          description: Начатые чаты
        messagesSent:
          type: integer
          default: 0
          description: Отправленные сообщения
        messagesFromBot:
          type: integer
          default: 0
          description: Сообщения от бота
        messagesFromUser:
          type: integer
          default: 0
          description: Сообщения от пользователя
        requestsCount:
          type: integer
          default: 0
          description: Количество запросов

    ChatBot:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор бота.
        apiKeyId:
          type: string
          description: Идентификатор API ключа, связанного с ботом.
        role:
          type: string
          nullable: true
          description: Роль бота, определяющая его поведение и функции.
        tasks:
          type: string
          nullable: true
          description: Задачи, которые должен выполнять бот.
        emotionalProfile:
          type: string
          nullable: true
          description: Эмоциональный профиль бота, определяющий его стиль общения.
        context:
          type: string
          nullable: true
          description: Контекст, в котором бот будет работать.
        example:
          type: string
          nullable: true
          description: Примеры диалогов или взаимодействий с ботом.
        notes:
          type: string
          nullable: true
          description: Дополнительные заметки о боте.
        categories:
          type: array
          items:
            type: string
          description: Категории, к которым относится бот, для удобства поиска и фильтрации.
        createdAt:
          type: string
          format: date-time
          description: Дата и время создания бота.
        updatedAt:
          type: string
          format: date-time
          description: Дата и время последнего обновления информации о боте.

    ChatCustomization:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор настройки чата.
        icon:
          type: string
          nullable: true
          description: Имя файла иконки, используемой в чате.
        iconMimeType:
          type: string
          nullable: true
          description: MIME-тип иконки.
        greeting:
          type: string
          nullable: true
          description: Приветственное сообщение, отображаемое пользователю при входе в чат.
        headerTitle:
          type: string
          nullable: true
          description: Заголовок, отображаемый в шапке чата.
        headerColor:
          type: string
          nullable: true
          description: Цвет фона шапки чата в формате HEX или RGB.
        headerTextColor:
          type: string
          nullable: true
          description: Цвет текста в шапке чата в формате HEX или RGB.
        backgroundColor:
          type: string
          nullable: true
          description: Цвет фона чата в формате HEX или RGB.
        userColor:
          type: string
          nullable: true
          description: Цвет сообщений пользователя в формате HEX или RGB.
        userBorderColor:
          type: string
          nullable: true
          description: Цвет границы сообщений пользователя в формате HEX или RGB.
        userTextColor:
          type: string
          nullable: true
          description: Цвет текста сообщений пользователя в формате HEX или RGB.
        botColor:
          type: string
          nullable: true
          description: Цвет сообщений бота в формате HEX или RGB.
        botBorderColor:
          type: string
          nullable: true
          description: Цвет границы сообщений бота в формате HEX или RGB.
        botTextColor:
          type: string
          nullable: true
          description: Цвет текста сообщений бота в формате HEX или RGB.
        customCSS:
          type: string
          nullable: true
          description: Пользовательские CSS стили для настройки внешнего вида чата.
        botId:
          type: string
          description: Идентификатор бота, к которому относятся настройки.

    Chat:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор чата.
        apiKeyId:
          type: string
          description: Идентификатор API ключа, связанного с чатом.
        title:
          type: string
          description: Заголовок чата.
        createdAt:
          type: string
          format: date-time
          description: Дата и время создания чата.
        updatedAt:
          type: string
          format: date-time
          description: Дата и время последнего обновления чата.
        mode:
          type: string
          enum: [bot, human]
          default: bot
          description: Режим чата (бот или человек).
        isClosed:
          type: boolean
          default: false
          description: Указывает, закрыт ли чат.

    Message:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор сообщения.
        chatId:
          type: string
          description: Идентификатор чата, к которому относится сообщение.
        content:
          type: string
          description: Содержимое сообщения.
        role:
          type: string
          enum: [user, assistant, human]
          description: Роль отправителя сообщения (пользователь, ассистент, человек).
        createdAt:
          type: string
          format: date-time
          description: Дата и время создания сообщения.
        updatedAt:
          type: string
          format: date-time
          description: Дата и время последнего обновления сообщения.

    # Модели для промптов
    Prompt:
      type: object
      properties:
        id:
          type: string
          format: uuid
        category:
          type: string
          description: Категория промпта
        content:
          type: string
          nullable: true
          description: Содержание промпта
        vector:
          type: string
          description: Векторное представление
        isActive:
          type: boolean
          default: true
        botId:
          type: string
          description: ID бота
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Модели для новостей
    News:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          description: Заголовок новости
        content:
          type: string
          description: Содержание новости
        type:
          type: string
          enum: [news, update, maintenance, announcement]
          default: news
        status:
          type: string
          enum: [draft, published, archived]
          default: draft
        priority:
          type: integer
          default: 0
        viewedBy:
          type: array
          items:
            type: string
          description: ID пользователей, просмотревших новость
        roles:
          type: array
          items:
            type: string
          description: Роли пользователей с доступом
        publishAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Модели для заказов
    Orders:
      type: object
      properties:
        id:
          type: string
          format: uuid
        companyName:
          type: string
          description: Название компании
        email:
          type: string
          description: Email для связи
        name:
          type: string
          description: Имя контактного лица
        phone:
          type: string
          nullable: true
          description: Телефон
        telegram:
          type: string
          nullable: true
          description: Telegram
        status:
          type: string
          enum: [new, processing, completed]
          default: new
        notes:
          type: string
          nullable: true
          description: Дополнительные заметки
        metadata:
          type: object
          description: Метаданные заявки (IP, User-Agent, Referer)
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Модели для пресетов ботов
    BotPreset:
      type: object
      properties:
        id:
          type: string
          format: uuid
        icon:
          type: string
          nullable: true
          description: Имя файла иконки
        title:
          type: string
          description: Название пресета
        description:
          type: string
          nullable: true
          description: Описание пресета
        isPublic:
          type: boolean
          default: false
          description: Доступность пресета
        role:
          type: string
          nullable: true
          description: Роль бота
        tasks:
          type: string
          nullable: true
          description: Задачи бота
        emotionalProfile:
          type: string
          nullable: true
          description: Эмоциональный профиль
        context:
          type: string
          nullable: true
          description: Контекст работы
        example:
          type: string
          nullable: true
          description: Примеры диалогов
        notes:
          type: string
          nullable: true
          description: Дополнительные заметки
        categories:
          type: array
          items:
            type: string
          default: []
        customization:
          type: object
          description: Настройки внешнего вида
        prompts:
          type: object
          description: Массив промптов с категориями
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
