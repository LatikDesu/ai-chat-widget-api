generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiKey {
  id         String    @id
  owner      String    @db.Text // Владелец API ключа
  title      String    @db.Text // Заголовок ключа
  tokenLimit Int       @default(50000) // Лимит токенов для ключа
  createdAt  DateTime  @default(now()) // Дата создания ключа
  expiredAt  DateTime  @default(dbgenerated("NOW() + interval '7 days'")) // Дата истечения ключа
  lastUsedAt DateTime? // Дата последнего использования
  isActive   Boolean   @default(true) // Активен ли ключ

  // Связи с каскадным удалением
  statistics  ApiKeyStatistics? @relation("ApiKeyToStatistics")
  bot         ChatBot?          @relation("ApiKeyToBot")
  chats       Chat[]            @relation("ApiKeyToChats")
  ApiKeyUsage ApiKeyUsage[]

  @@index([id])
  @@index([owner]) // Индекс для поиска по владельцу
  @@index([isActive]) // Индекс для фильтрации по активности
  @@index([expiredAt]) // Индекс для проверки срока действия
  @@index([createdAt]) // Индекс для сортировки по дате создания
  @@index([lastUsedAt]) // Индекс для отслеживания использования
  @@index([title]) // Индекс для поиска по заголовку
}

model ApiKeyStatistics {
  id       String @id @default(uuid())
  apiKeyId String @unique
  apiKey   ApiKey @relation("ApiKeyToStatistics", fields: [apiKeyId], references: [id], onDelete: Cascade)

  // Общая статистика за все время
  tokenUsed               Int @default(0) // Всего использовано токенов
  totalChatsStarted       Int @default(0) // Всего создано чатов
  totalMessagesSent       Int @default(0) // Всего отправлено сообщений
  requestsCount           Int @default(0) // Количество запросов
  // Статистика по типам сообщений
  botMessagesCount        Int @default(0) // Количество сообщений от бота
  humanMessagesCount      Int @default(0) // Количество сообщений от человека
  consultantMessagesCount Int @default(0) // Количество сообщений от консультанта
  // Статистика по времени ответа
  totalResponseTime       Int @default(0) // Общее время ответа (в секундах)
  responseCount           Int @default(0) // Количество ответов
  // Для чатов
  completedChats          Int @default(0)
  totalChatDuration       Int @default(0)
  shortestChatDuration    Int @default(0)
  longestChatDuration     Int @default(0)
  // Для активности
  mostActiveHour          Int @default(0)
  leastActiveHour         Int @default(0)

  updatedAt DateTime @updatedAt // Время последнего обновления статистики

  @@index([apiKeyId])
}

model ApiKeyUsage {
  id       String @id @default(uuid())
  apiKeyId String // Внешний ключ, связывающий статистику с API ключом
  apiKey   ApiKey @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  timeInterval DateTime // Интервал времени (например, начало часа)

  tokenUsed        Int @default(0) // Количество использованных токенов за интервал
  chatsStarted     Int @default(0) // Количество начатых чатов за интервал
  messagesSent     Int @default(0) // Количество сообщений, отправленных за интервал
  messagesFromBot  Int @default(0) // Количество сообщений от бота за интервал
  messagesFromUser Int @default(0) // Сообщения от человека за интервал
  requestsCount    Int @default(0) // Общее число запросов за интервал

  @@unique([apiKeyId, timeInterval]) // Один интервал времени для одного API ключа
  @@index([timeInterval]) // Индекс для временного интервала
}

model ChatBot {
  id               String   @id @default(uuid())
  apiKeyId         String   @unique
  apiKey           ApiKey   @relation("ApiKeyToBot", fields: [apiKeyId], references: [id], onDelete: Cascade)
  role             String?  @db.Text
  tasks            String?  @db.Text
  emotionalProfile String?  @db.Text
  context          String?  @db.Text
  example          String?  @db.Text
  notes            String?  @db.Text
  categories       String[] @default([])

  createdAt DateTime @default(now()) // Дата создания чата
  updatedAt DateTime @updatedAt // Дата последнего обновления

  // Настройки для будущих чатов
  customization ChatCustomization? @relation("BotToCustomization") // Настройки внешнего вида
  prompts       Prompt[]           @relation("BotToPrompts") // Промпты для чатов

  @@index([apiKeyId])
}

model ChatCustomization {
  id              String  @id @default(uuid())
  icon            String? @db.Text // Имя файла иконки в формате {apiKeyId}.{ext}
  iconMimeType    String? @db.Text // MIME тип загруженной иконки
  greeting        String? // Приветствие
  headerTitle     String? // Заголовок
  headerColor     String? // Цвет заголовка
  headerTextColor String? // Цвет текста заголовка
  backgroundColor String? // Цвет фона
  userColor       String? // Цвет пользователя
  userBorderColor String? // Цвет границы пользователя
  userTextColor   String? // Цвет текста пользователя
  botColor        String? // Цвет бота
  botBorderColor  String? // Цвет границы бота
  botTextColor    String? // Цвет текста бота
  customCSS       String? @db.Text // Пользовательский CSS

  botId String  @unique
  bot   ChatBot @relation("BotToCustomization", fields: [botId], references: [id], onDelete: Cascade)

  @@map("ChatCustomization")
}

model Prompt {
  id       String                 @id @default(uuid())
  category String // Назначение промпта
  content  String? // Содержание промпта (шаблон или инструкции для AI)
  vector   Unsupported("vector")? // Векторное представление контента для семантического поиска
  isActive Boolean                @default(true)

  botId String
  bot   ChatBot @relation("BotToPrompts", fields: [botId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) // Дата и время создания промпта
  updatedAt DateTime @updatedAt // Дата и время последнего обновления промпта

  @@index([botId]) // Индекс для оптимизации поиска промптов по боту
}

model Chat {
  id       String @id @default(uuid())
  apiKeyId String
  apiKey   ApiKey @relation("ApiKeyToChats", fields: [apiKeyId], references: [id], onDelete: Cascade)

  title     String    @db.Text // Название чата
  createdAt DateTime  @default(now()) // Дата создания чата
  updatedAt DateTime  @updatedAt // Дата последнего обновления
  mode      String    @default("bot") // Режим чата: "bot" или "human"
  isClosed  Boolean   @default(false) // Закрыт ли чат
  messages  Message[] // Сообщения в чате

  @@index([apiKeyId])
}

model Message {
  id        String   @id @default(uuid())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String // ID чата, которому принадлежит собщение
  content   String   @db.Text // Текст сообщения
  role      String   @db.Text // Роль отправителя: "user", "assistant" или "human"
  createdAt DateTime @default(now()) // Время отправки сообщения
  updatedAt DateTime @updatedAt // Дата последнего обновления

  @@index([chatId])
}

model Orders {
  id          String   @id @default(uuid())
  companyName String   @db.Text // Название компании
  email       String   @db.Text // Email для связи
  name        String   @db.Text // Имя контактного лица
  phone       String?  @db.Text // Телефон (опционально)
  telegram    String?  @db.Text // Telegram (опционально)
  status      String   @default("new") // Статус заявки: new, processing, completed
  notes       String?  @db.Text // Дополнительные заметки
  metadata    Json?    @db.JsonB // Метаданные заявки (IP, User-Agent, Referer)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
  @@index([email])
}

model Users {
  id              String           @id @default(uuid())
  email           String           @unique @db.Text // Уникальный email для входа в систему
  password        String           @db.Text // Хэшированный пароль пользователя
  role            String           @default("business") // Роль пользователя: administrator - полный доступ, business - доступ к своим ключам, manager - ограниченный доступ
  isActive        Boolean          @default(false) // Флаг активации учетной записи
  companyName     String?          @db.Text // Название компании (опционально)
  name            String?          @db.Text // Имя пользователя (опционально)
  phone           String?          @db.Text // Контактный телефон (опционально)
  telegram        String?          @db.Text // Telegram контакт (опционально)
  createdAt       DateTime         @default(now()) // Дата и время создания пользователя
  updatedAt       DateTime         @updatedAt // Дата и время последнего обновления пользователя
  apiKeyIds       String[] // Массив ID доступных API ключей
  activationToken ActivationToken?

  @@index([email]) // Индекс для быстрого поиска по email
  @@index([role]) // Индекс для фильтрации пользователей по роли
  @@index([isActive]) // Индекс для фильтрации по активности
}

model ActivationToken {
  id        String   @id @default(uuid())
  token     String   @unique // Уникальный токен для активации
  userId    String   @unique // ID пользователя
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime // Срок действия токена
  createdAt DateTime @default(now())

  @@index([token])
}

model News {
  id       String   @id @default(uuid())
  title    String   @db.Text // Заголовок новости
  content  String   @db.Text // Содержание новости
  type     String   @default("news") // Тип: news, update, maintenance, announcement
  status   String   @default("draft") // Статус: draft, published, archived
  priority Int      @default(0) // Приоритет для сортировки
  viewedBy String[] // Массив ID пользователей, просмотревших новость
  roles    String[] // Массив ролей пользователей, которым доступна новость

  publishAt DateTime? // Дата публикации (null для черновиков)
  createdAt DateTime  @default(now()) // Дата создания
  updatedAt DateTime  @updatedAt // Дата обновления

  @@index([status]) // Индекс для фильтрации по статусу
  @@index([type]) // Индекс для фильтрации по типу
  @@index([priority]) // Индекс для сортировки по приоритету
  @@index([publishAt]) // Индекс для фильтрации по дате публикации
  @@index([createdAt]) // Индекс для сортировки по дате создания
}

model BotPreset {
  id          String  @id @default(uuid())
  icon        String? @db.Text // Имя файла иконки 
  title       String  @db.Text // Название пресета
  description String? @db.Text // Описание пресета
  isPublic    Boolean @default(false) // Доступен ли пресет всем пользователям

  // Настройки бота
  role             String?  @db.Text // Роль бота
  tasks            String?  @db.Text // Задачи бота
  emotionalProfile String?  @db.Text // Эмоциональный профиль
  context          String?  @db.Text // Контекст работы
  example          String?  @db.Text // Примеры диалогов
  notes            String?  @db.Text // Дополнительные заметки
  categories       String[] @default([]) // Категории для фильтрации

  // Настройки внешнего вида и промпты
  customization Json? @db.JsonB // Настройки внешнего вида (цвета, заголовки и т.д.)
  prompts       Json? @db.JsonB // Массив промптов с категориями

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isPublic])
  @@index([createdAt])
  @@map("BotPreset")
}
